/**
 * Place holder for license disclaimer
 **/
package gles.internal;

import android.opengl.*;
import java.nio.*;

/**
 * Binding to OpenGL 1.x Extensions.<br>
 * Generated by JGLES-gen, from https://github.com/AlessandroBorges/JGLES-gen
 * 
 * @author Alessandro Borges
 * @see https://github.com/AlessandroBorges/JGLES-gen
 */
public class GLES11Extensions {
    // @formatter:off 
    /*JNI 
    // EGL includes
    #define EGL_EGLEXT_PROTOTYPES 1
    #include <EGL/egl.h>
    #include <EGL/eglext.h>

  // GLES 1.x  api
    #define GL_GLEXT_PROTOTYPES 1 
    #include <GLES/egl.h>
    #include <GLES/gl.h>
    #include <GLES/glext.h>

  
  */
  // end of JNI header

  static protected native void init(); /* 
    loadAll();
  */

  /** loading native stuff */
  static{
    init();
  }

    /**
     * Enumeration for extension: GL_AMD_compressed_3DC_texture
     */
    // enumerations: 
	 public static final int   GL_3DC_X_AMD = 0x87F9;
	 public static final int   GL_3DC_XY_AMD = 0x87FA;

 
    /**
     * Enumeration for extension: GL_AMD_compressed_ATC_texture
     */
    // enumerations: 
	 public static final int   GL_ATC_RGB_AMD = 0x8C92;
	 public static final int   GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
	 public static final int   GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;

 
 // Function(s) for extension GL_APPLE_copy_texture_levels, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_APPLE_copy_texture_levels
  *  
  * C Prototype:
  * void  glCopyTextureLevelsAPPLE ( 
  * 		 GLuint   destinationTexture,
  * 		 GLuint   sourceTexture,
  * 		 GLint   sourceBaseLevel,
  * 		 GLsizei   sourceLevelCount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_copy_texture_levels.txt">GL_APPLE_copy_texture_levels</a> 
  **/ 
 public final native static 
  void glCopyTextureLevelsAPPLE (int destinationTexture,
                                  int sourceTexture,
                                  int sourceBaseLevel,
                                  int sourceLevelCount);/*
	 // jnigen - native goes here
  	 glCopyTextureLevelsAPPLE( (GLuint) destinationTexture,
  	                           (GLuint) sourceTexture,
  	                           (GLint) sourceBaseLevel,
  	                           (GLsizei) sourceLevelCount);
  	   */
    /**
     * Enumeration for extension: GL_APPLE_framebuffer_multisample
     */
    // enumerations: 
	 public static final int   GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
	 public static final int   GL_MAX_SAMPLES_APPLE = 0x8D57;
	 public static final int   GL_READ_FRAMEBUFFER_APPLE = 0x8CA8;
	 public static final int   GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
	 public static final int   GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
	 public static final int   GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;

 
 // Function(s) for extension GL_APPLE_framebuffer_multisample, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_APPLE_framebuffer_multisample
  *  
  * C Prototype:
  * void  glRenderbufferStorageMultisampleAPPLE ( 
  * 		 GLenum   target,
  * 		 GLsizei   samples,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_framebuffer_multisample.txt">GL_APPLE_framebuffer_multisample</a> 
  **/ 
 public final native static 
  void glRenderbufferStorageMultisampleAPPLE (int target,
                                               int samples,
                                               int internalformat,
                                               int width,
                                               int height);/*
	 // jnigen - native goes here
  	 glRenderbufferStorageMultisampleAPPLE( (GLenum) target,
  	                                        (GLsizei) samples,
  	                                        (GLenum) internalformat,
  	                                        (GLsizei) width,
  	                                        (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_framebuffer_multisample
  *  
  * C Prototype:
  * void  glResolveMultisampleFramebufferAPPLE ( 
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_framebuffer_multisample.txt">GL_APPLE_framebuffer_multisample</a> 
  **/ 
 public final native static 
  void glResolveMultisampleFramebufferAPPLE ();/*
	 // jnigen - native goes here
  	 glResolveMultisampleFramebufferAPPLE();
  	   */
    /**
     * Enumeration for extension: GL_APPLE_sync
     */
    // enumerations: 
	 public static final int   GL_SYNC_OBJECT_APPLE = 0x8A53;
	 public static final int   GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111;
	 public static final int   GL_OBJECT_TYPE_APPLE = 0x9112;
	 public static final int   GL_SYNC_CONDITION_APPLE = 0x9113;
	 public static final int   GL_SYNC_STATUS_APPLE = 0x9114;
	 public static final int   GL_SYNC_FLAGS_APPLE = 0x9115;
	 public static final int   GL_SYNC_FENCE_APPLE = 0x9116;
	 public static final int   GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117;
	 public static final int   GL_UNSIGNALED_APPLE = 0x9118;
	 public static final int   GL_SIGNALED_APPLE = 0x9119;
	 public static final int   GL_ALREADY_SIGNALED_APPLE = 0x911A;
	 public static final int   GL_TIMEOUT_EXPIRED_APPLE = 0x911B;
	 public static final int   GL_CONDITION_SATISFIED_APPLE = 0x911C;
	 public static final int   GL_WAIT_FAILED_APPLE = 0x911D;
	 public static final int   GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001;
	 public static final long  GL_TIMEOUT_IGNORED_APPLE = -1L;

 
 // Function(s) for extension GL_APPLE_sync, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  *   GLsync glFenceSyncAPPLE ( 
  * 		 GLenum   condition,
  * 		 GLbitfield   flags
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  int glFenceSyncAPPLE (int condition,
                         int flags);/*
	 // jnigen - native goes here
  	   return (jint)  glFenceSyncAPPLE( (GLenum) condition,
  	                                    (GLbitfield) flags);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glFenceSyncAPPLE
  * C Prototype:
  *   GLsync glFenceSync ( 
  * 		 GLenum   condition,
  * 		 GLbitfield   flags
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  int glFenceSync (int condition,
                    int flags);/*
	 // jnigen - native goes here
  	   return (jint)  glFenceSync( (GLenum) condition,
  	                               (GLbitfield) flags);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  *   GLboolean glIsSyncAPPLE ( 
  * 		 GLsync   sync
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  boolean glIsSyncAPPLE (int sync);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsSyncAPPLE( (GLsync) sync);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glIsSyncAPPLE
  * C Prototype:
  *   GLboolean glIsSync ( 
  * 		 GLsync   sync
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  boolean glIsSync (int sync);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsSync( (GLsync) sync);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  * void  glDeleteSyncAPPLE ( 
  * 		 GLsync   sync
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glDeleteSyncAPPLE (int sync);/*
	 // jnigen - native goes here
  	 glDeleteSyncAPPLE( (GLsync) sync);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glDeleteSyncAPPLE
  * C Prototype:
  * void  glDeleteSync ( 
  * 		 GLsync   sync
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glDeleteSync (int sync);/*
	 // jnigen - native goes here
	 if(!glDeleteSync) 
	      throwUOPE("glDeleteSync is not available.");
	  
  	 glDeleteSync( (GLsync) sync);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  *   GLenum glClientWaitSyncAPPLE ( 
  * 		 GLsync   sync,
  * 		 GLbitfield   flags,
  * 		 GLuint64   timeout
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  int glClientWaitSyncAPPLE (int sync,
                              int flags,
                              long timeout);/*
	 // jnigen - native goes here
  	   return (jint)  glClientWaitSyncAPPLE( (GLsync) sync,
  	                                         (GLbitfield) flags,
  	                                         (GLuint64) timeout);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glClientWaitSyncAPPLE
  * C Prototype:
  *   GLenum glClientWaitSync ( 
  * 		 GLsync   sync,
  * 		 GLbitfield   flags,
  * 		 GLuint64   timeout
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  int glClientWaitSync (int sync,
                         int flags,
                         long timeout);/*
	 // jnigen - native goes here
  	   return (jint)  glClientWaitSync( (GLsync) sync,
  	                                    (GLbitfield) flags,
  	                                    (GLuint64) timeout);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  * void  glWaitSyncAPPLE ( 
  * 		 GLsync   sync,
  * 		 GLbitfield   flags,
  * 		 GLuint64   timeout
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glWaitSyncAPPLE (int sync,
                         int flags,
                         long timeout);/*
	 // jnigen - native goes here
  	 glWaitSyncAPPLE( (GLsync) sync,
  	                  (GLbitfield) flags,
  	                  (GLuint64) timeout);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glWaitSyncAPPLE
  * C Prototype:
  * void  glWaitSync ( 
  * 		 GLsync   sync,
  * 		 GLbitfield   flags,
  * 		 GLuint64   timeout
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glWaitSync (int sync,
                    int flags,
                    long timeout);/*
	 // jnigen - native goes here
  	 glWaitSync( (GLsync) sync,
  	             (GLbitfield) flags,
  	             (GLuint64) timeout);
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  * void  glGetInteger64vAPPLE ( 
  * 		 GLenum   pname,
  * 		 GLint64  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
 void glGetInteger64vAPPLE( int pname,
                            java.nio.LongBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetInteger64vAPPLE( (GLenum) pname,
  	                       (GLint64  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  * void  glGetInteger64vAPPLE ( 
  * 		 GLenum   pname,
  * 		 GLint64  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glGetInteger64vAPPLE( int pname,
                             long[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetInteger64vAPPLE( (GLenum) pname,
  	                       (GLint64  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glGetInteger64vAPPLE
  * C Prototype:
  * void  glGetInteger64v ( 
  * 		 GLenum   pname,
  * 		 GLint64  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
 void glGetInteger64v( int pname,
                       java.nio.LongBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetInteger64v( (GLenum) pname,
  	                  (GLint64  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glGetInteger64vAPPLE
  * C Prototype:
  * void  glGetInteger64v ( 
  * 		 GLenum   pname,
  * 		 GLint64  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glGetInteger64v( int pname,
                        long[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetInteger64v( (GLenum) pname,
  	                  (GLint64  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  * void  glGetSyncivAPPLE ( 
  * 		 GLsync   sync,
  * 		 GLenum   pname,
  * 		 GLsizei   bufSize,
  * 		 GLsizei  * length,
  * 		 GLint  * values
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
 void glGetSyncivAPPLE( int sync,
                        int pname,
                        int bufSize,
                        java.nio.IntBuffer length, int lengthOffset,
                        java.nio.IntBuffer values, int valuesOffset); /*
	 // jnigen - native goes here
  	 glGetSyncivAPPLE( (GLsync) sync,
  	                   (GLenum) pname,
  	                   (GLsizei) bufSize,
  	                   (GLsizei  *) (length + lengthOffset),
  	                   (GLint  *) (values + valuesOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  
  * C Prototype:
  * void  glGetSyncivAPPLE ( 
  * 		 GLsync   sync,
  * 		 GLenum   pname,
  * 		 GLsizei   bufSize,
  * 		 GLsizei  * length,
  * 		 GLint  * values
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glGetSyncivAPPLE( int sync,
                         int pname,
                         int bufSize,
                         int[] length, int lengthOffset,
                         int[] values, int valuesOffset);/*
	 // jnigen - native goes here
  	 glGetSyncivAPPLE( (GLsync) sync,
  	                   (GLenum) pname,
  	                   (GLsizei) bufSize,
  	                   (GLsizei  *) (length + lengthOffset),
  	                   (GLint  *) (values + valuesOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glGetSyncivAPPLE
  * C Prototype:
  * void  glGetSynciv ( 
  * 		 GLsync   sync,
  * 		 GLenum   pname,
  * 		 GLsizei   bufSize,
  * 		 GLsizei  * length,
  * 		 GLint  * values
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
 void glGetSynciv( int sync,
                   int pname,
                   int bufSize,
                   java.nio.IntBuffer length, int lengthOffset,
                   java.nio.IntBuffer values, int valuesOffset); /*
	 // jnigen - native goes here
  	 glGetSynciv( (GLsync) sync,
  	              (GLenum) pname,
  	              (GLsizei) bufSize,
  	              (GLsizei  *) (length + lengthOffset),
  	              (GLint  *) (values + valuesOffset));
  	   */

 /**<pre>
  *  Extension: GL_APPLE_sync
  *  alias of glGetSyncivAPPLE
  * C Prototype:
  * void  glGetSynciv ( 
  * 		 GLsync   sync,
  * 		 GLenum   pname,
  * 		 GLsizei   bufSize,
  * 		 GLsizei  * length,
  * 		 GLint  * values
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt">GL_APPLE_sync</a> 
  **/ 
 public final native static 
  void glGetSynciv( int sync,
                    int pname,
                    int bufSize,
                    int[] length, int lengthOffset,
                    int[] values, int valuesOffset);/*
	 // jnigen - native goes here
  	 glGetSynciv( (GLsync) sync,
  	              (GLenum) pname,
  	              (GLsizei) bufSize,
  	              (GLsizei  *) (length + lengthOffset),
  	              (GLint  *) (values + valuesOffset));
  	   */
    /**
     * Enumeration for extension: GL_APPLE_texture_format_BGRA8888
     */
    // enumerations: 
    //	 public static final int   GL_BGRA_EXT = 0x80E1;

     // enumerations: 
	 public static final int   GL_BGRA8_EXT = 0x93A1;

 
    /**
     * Enumeration for extension: GL_APPLE_texture_max_level
     */
    // enumerations: 
	 public static final int   GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D;

 
    /**
     * Enumeration for extension: GL_EXT_blend_minmax
     */
    // enumerations: 
	 public static final int   GL_MIN_EXT = 0x8007;
	 public static final int   GL_MAX_EXT = 0x8008;

 
    /**
     * Enumeration for extension: GL_EXT_discard_framebuffer
     */
    // enumerations: 
	 public static final int   GL_COLOR_EXT = 0x1800;
	 public static final int   GL_DEPTH_EXT = 0x1801;
	 public static final int   GL_STENCIL_EXT = 0x1802;

 
 // Function(s) for extension GL_EXT_discard_framebuffer, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_discard_framebuffer
  *  
  * C Prototype:
  * void  glDiscardFramebufferEXT ( 
  * 		 GLenum   target,
  * 		 GLsizei   numAttachments,
  * 		 const  GLenum  * attachments
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_discard_framebuffer.txt">GL_EXT_discard_framebuffer</a> 
  **/ 
 public final native static 
  void glDiscardFramebufferEXT( int target,
                                int numAttachments,
                                final int [] attachments, int attachmentsOffset);/*
	 // jnigen - native goes here
  	 glDiscardFramebufferEXT( (GLenum) target,
  	                          (GLsizei) numAttachments,
  	                          (const  GLenum  *) (attachments + attachmentsOffset));
  	   */

 /**<pre>
  *  Extension: GL_EXT_discard_framebuffer
  *  
  * C Prototype:
  * void  glDiscardFramebufferEXT ( 
  * 		 GLenum   target,
  * 		 GLsizei   numAttachments,
  * 		 const  GLenum  * attachments
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_discard_framebuffer.txt">GL_EXT_discard_framebuffer</a> 
  **/ 
 public final native static 
 void glDiscardFramebufferEXT( int target,
                               int numAttachments,
                               java.nio.IntBuffer attachments, int attachmentsOffset); /*
	 // jnigen - native goes here
  	 glDiscardFramebufferEXT( (GLenum) target,
  	                          (GLsizei) numAttachments,
  	                          (const  GLenum  *) (attachments + attachmentsOffset));
  	   */
    /**
     * Enumeration for extension: GL_EXT_map_buffer_range
     */
    // enumerations: 
	 public static final int   GL_MAP_READ_BIT_EXT = 0x0001;
	 public static final int   GL_MAP_WRITE_BIT_EXT = 0x0002;
	 public static final int   GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004;
	 public static final int   GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008;
	 public static final int   GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010;
	 public static final int   GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020;

 
 // Function(s) for extension GL_EXT_map_buffer_range, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_map_buffer_range
  *  
  * C Prototype:
  * void * glMapBufferRangeEXT ( 
  * 		 GLenum   target,
  * 		 GLintptr   offset,
  * 		 GLsizeiptr   length,
  * 		 GLbitfield   access
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_map_buffer_range.txt">GL_EXT_map_buffer_range</a> 
  **/ 
 public final native static 
  Buffer glMapBufferRangeEXT (int target,
                               int[] offset,
                               int[] length,
                               int access);/*
	 // jnigen - native goes here
  	return (jlong)  glMapBufferRangeEXT( (GLenum) target,
  	                                     (GLintptr) offset,
  	                                     (GLsizeiptr) length,
  	                                     (GLbitfield) access);
  	   */

 /**<pre>
  *  Extension: GL_EXT_map_buffer_range
  *  alias of glMapBufferRangeEXT
  * C Prototype:
  * void * glMapBufferRange ( 
  * 		 GLenum   target,
  * 		 GLintptr   offset,
  * 		 GLsizeiptr   length,
  * 		 GLbitfield   access
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_map_buffer_range.txt">GL_EXT_map_buffer_range</a> 
  **/ 
 public final native static 
  Buffer glMapBufferRange (int target,
                            int[] offset,
                            int[] length,
                            int access);/*
	 // jnigen - native goes here
  	return (jlong)  glMapBufferRange( (GLenum) target,
  	                                  (GLintptr) offset,
  	                                  (GLsizeiptr) length,
  	                                  (GLbitfield) access);
  	   */

 /**<pre>
  *  Extension: GL_EXT_map_buffer_range
  *  
  * C Prototype:
  * void  glFlushMappedBufferRangeEXT ( 
  * 		 GLenum   target,
  * 		 GLintptr   offset,
  * 		 GLsizeiptr   length
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_map_buffer_range.txt">GL_EXT_map_buffer_range</a> 
  **/ 
 public final native static 
  void glFlushMappedBufferRangeEXT (int target,
                                     int[] offset,
                                     int[] length);/*
	 // jnigen - native goes here
  	 glFlushMappedBufferRangeEXT( (GLenum) target,
  	                              (GLintptr) offset,
  	                              (GLsizeiptr) length);
  	   */

 /**<pre>
  *  Extension: GL_EXT_map_buffer_range
  *  alias of glFlushMappedBufferRangeEXT
  * C Prototype:
  * void  glFlushMappedBufferRange ( 
  * 		 GLenum   target,
  * 		 GLintptr   offset,
  * 		 GLsizeiptr   length
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_map_buffer_range.txt">GL_EXT_map_buffer_range</a> 
  **/ 
 public final native static 
  void glFlushMappedBufferRange (int target,
                                  int[] offset,
                                  int[] length);/*
	 // jnigen - native goes here
  	 glFlushMappedBufferRange( (GLenum) target,
  	                           (GLintptr) offset,
  	                           (GLsizeiptr) length);
  	   */
 // Function(s) for extension GL_EXT_multi_draw_arrays, API: gl|gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_multi_draw_arrays
  *  
  * C Prototype:
  * void  glMultiDrawArraysEXT ( 
  * 		 GLenum   mode, // group=PrimitiveType  
  * 		 const  GLint  * first,
  * 		 const  GLsizei  * count,
  * 		 GLsizei   primcount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/multi_draw_arrays.txt">GL_EXT_multi_draw_arrays</a> 
  **/ 
 public final native static 
 void glMultiDrawArraysEXT( int mode	/*   group=PrimitiveType */,
                            java.nio.IntBuffer first, int firstOffset,
                            java.nio.IntBuffer count, int countOffset,
                            int primcount); /*
	 // jnigen - native goes here
  	 glMultiDrawArraysEXT( (GLenum) mode,
  	                       (const  GLint  *) (first + firstOffset),
  	                       (const  GLsizei  *) (count + countOffset),
  	                       (GLsizei) primcount);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multi_draw_arrays
  *  
  * C Prototype:
  * void  glMultiDrawArraysEXT ( 
  * 		 GLenum   mode, // group=PrimitiveType  
  * 		 const  GLint  * first,
  * 		 const  GLsizei  * count,
  * 		 GLsizei   primcount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/multi_draw_arrays.txt">GL_EXT_multi_draw_arrays</a> 
  **/ 
 public final native static 
  void glMultiDrawArraysEXT( int mode	/*   group=PrimitiveType */,
                             final int [] first, int firstOffset,
                             final int [] count, int countOffset,
                             int primcount);/*
	 // jnigen - native goes here
  	 glMultiDrawArraysEXT( (GLenum) mode,
  	                       (const  GLint  *) (first + firstOffset),
  	                       (const  GLsizei  *) (count + countOffset),
  	                       (GLsizei) primcount);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multi_draw_arrays
  *  alias of glMultiDrawArraysEXT
  * C Prototype:
  * void  glMultiDrawArrays ( 
  * 		 GLenum   mode, // group=PrimitiveType  
  * 		 const  GLint  * first,
  * 		 const  GLsizei  * count,
  * 		 GLsizei   primcount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/multi_draw_arrays.txt">GL_EXT_multi_draw_arrays</a> 
  **/ 
 public final native static 
 void glMultiDrawArrays( int mode	/*   group=PrimitiveType */,
                         java.nio.IntBuffer first, int firstOffset,
                         java.nio.IntBuffer count, int countOffset,
                         int primcount); /*
	 // jnigen - native goes here
  	 glMultiDrawArrays( (GLenum) mode,
  	                    (const  GLint  *) (first + firstOffset),
  	                    (const  GLsizei  *) (count + countOffset),
  	                    (GLsizei) primcount);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multi_draw_arrays
  *  alias of glMultiDrawArraysEXT
  * C Prototype:
  * void  glMultiDrawArrays ( 
  * 		 GLenum   mode, // group=PrimitiveType  
  * 		 const  GLint  * first,
  * 		 const  GLsizei  * count,
  * 		 GLsizei   primcount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/multi_draw_arrays.txt">GL_EXT_multi_draw_arrays</a> 
  **/ 
 public final native static 
  void glMultiDrawArrays( int mode	/*   group=PrimitiveType */,
                          final int [] first, int firstOffset,
                          final int [] count, int countOffset,
                          int primcount);/*
	 // jnigen - native goes here
  	 glMultiDrawArrays( (GLenum) mode,
  	                    (const  GLint  *) (first + firstOffset),
  	                    (const  GLsizei  *) (count + countOffset),
  	                    (GLsizei) primcount);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multi_draw_arrays
  *  
  * C Prototype:
  * void  glMultiDrawElementsEXT ( 
  * 		 GLenum   mode, // group=PrimitiveType  
  * 		 const  GLsizei  * count,
  * 		 GLenum   type, // group=DrawElementsType  
  * 		 const void *const* indices,
  * 		 GLsizei   primcount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/multi_draw_arrays.txt">GL_EXT_multi_draw_arrays</a> 
  **/ 
 public final native static 
 void glMultiDrawElementsEXT( int mode	/*   group=PrimitiveType */,
                              java.nio.IntBuffer count, int countOffset,
                              int type	/*   group=DrawElementsType */,
                              Buffer indices, int indicesOffset,
                              int primcount); /*
	 // jnigen - native goes here
  	 glMultiDrawElementsEXT( (GLenum) mode,
  	                         (const  GLsizei  *) (count + countOffset),
  	                         (GLenum) type,
  	                         (const void *const*) (indices + indicesOffset),
  	                         (GLsizei) primcount);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multi_draw_arrays
  *  alias of glMultiDrawElementsEXT
  * C Prototype:
  * void  glMultiDrawElements ( 
  * 		 GLenum   mode, // group=PrimitiveType  
  * 		 const  GLsizei  * count,
  * 		 GLenum   type, // group=DrawElementsType  
  * 		 const void *const* indices,
  * 		 GLsizei   primcount
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/multi_draw_arrays.txt">GL_EXT_multi_draw_arrays</a> 
  **/ 
 public final native static 
 void glMultiDrawElements( int mode	/*   group=PrimitiveType */,
                           java.nio.IntBuffer count, int countOffset,
                           int type	/*   group=DrawElementsType */,
                           Buffer indices, int indicesOffset,
                           int primcount); /*
	 // jnigen - native goes here
  	 glMultiDrawElements( (GLenum) mode,
  	                      (const  GLsizei  *) (count + countOffset),
  	                      (GLenum) type,
  	                      (const void *const*) (indices + indicesOffset),
  	                      (GLsizei) primcount);
  	   */
    /**
     * Enumeration for extension: GL_EXT_multisampled_render_to_texture
     */
    // enumerations: 
	 public static final int   GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
	 public static final int   GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
	 public static final int   GL_MAX_SAMPLES_EXT = 0x8D57;

 
 // Function(s) for extension GL_EXT_multisampled_render_to_texture, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_multisampled_render_to_texture
  *  
  * C Prototype:
  * void  glRenderbufferStorageMultisampleEXT ( 
  * 		 GLenum   target,
  * 		 GLsizei   samples,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_multisampled_render_to_texture.txt">GL_EXT_multisampled_render_to_texture</a> 
  **/ 
 public final native static 
  void glRenderbufferStorageMultisampleEXT (int target,
                                             int samples,
                                             int internalformat,
                                             int width,
                                             int height);/*
	 // jnigen - native goes here
  	 glRenderbufferStorageMultisampleEXT( (GLenum) target,
  	                                      (GLsizei) samples,
  	                                      (GLenum) internalformat,
  	                                      (GLsizei) width,
  	                                      (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multisampled_render_to_texture
  *  alias of glRenderbufferStorageMultisampleEXT
  * C Prototype:
  * void  glRenderbufferStorageMultisample ( 
  * 		 GLenum   target,
  * 		 GLsizei   samples,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_multisampled_render_to_texture.txt">GL_EXT_multisampled_render_to_texture</a> 
  **/ 
 public final native static 
  void glRenderbufferStorageMultisample (int target,
                                          int samples,
                                          int internalformat,
                                          int width,
                                          int height);/*
	 // jnigen - native goes here
  	 glRenderbufferStorageMultisample( (GLenum) target,
  	                                   (GLsizei) samples,
  	                                   (GLenum) internalformat,
  	                                   (GLsizei) width,
  	                                   (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_EXT_multisampled_render_to_texture
  *  
  * C Prototype:
  * void  glFramebufferTexture2DMultisampleEXT ( 
  * 		 GLenum   target,
  * 		 GLenum   attachment,
  * 		 GLenum   textarget,
  * 		 GLuint   texture,
  * 		 GLint   level,
  * 		 GLsizei   samples
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_multisampled_render_to_texture.txt">GL_EXT_multisampled_render_to_texture</a> 
  **/ 
 public final native static 
  void glFramebufferTexture2DMultisampleEXT (int target,
                                              int attachment,
                                              int textarget,
                                              int texture,
                                              int level,
                                              int samples);/*
	 // jnigen - native goes here
  	 glFramebufferTexture2DMultisampleEXT( (GLenum) target,
  	                                       (GLenum) attachment,
  	                                       (GLenum) textarget,
  	                                       (GLuint) texture,
  	                                       (GLint) level,
  	                                       (GLsizei) samples);
  	   */
    /**
     * Enumeration for extension: GL_EXT_read_format_bgra
     */
    // enumerations: 
    //	 public static final int   GL_BGRA_EXT = 0x80E1;
	 public static final int   GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
	 public static final int   GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;

 
    /**
     * Enumeration for extension: GL_EXT_robustness
     */
    // enumerations: 
	 public static final int   GL_NO_ERROR = 0;
	 public static final int   GL_GUILTY_CONTEXT_RESET_EXT = 0x8253;
	 public static final int   GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254;
	 public static final int   GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255;
	 public static final int   GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3;
	 public static final int   GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256;
	 public static final int   GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252;
	 public static final int   GL_NO_RESET_NOTIFICATION_EXT = 0x8261;

 
 // Function(s) for extension GL_EXT_robustness, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  
  * C Prototype:
  *   GLenum glGetGraphicsResetStatusEXT ( 
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
  int glGetGraphicsResetStatusEXT ();/*
	 // jnigen - native goes here
  	   return (jint)  glGetGraphicsResetStatusEXT();
  	   */

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  
  * C Prototype:
  * void  glReadnPixelsEXT ( 
  * 		 GLint   x,
  * 		 GLint   y,
  * 		 GLsizei   width,
  * 		 GLsizei   height,
  * 		 GLenum   format,
  * 		 GLenum   type,
  * 		 GLsizei   bufSize,
  * 		 void * data
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
 void glReadnPixelsEXT( int x,
                        int y,
                        int width,
                        int height,
                        int format,
                        int type,
                        int bufSize,
                        java.nio.Buffer data, int dataOffset); /*
	 // jnigen - native goes here
  	 glReadnPixelsEXT( (GLint) x,
  	                   (GLint) y,
  	                   (GLsizei) width,
  	                   (GLsizei) height,
  	                   (GLenum) format,
  	                   (GLenum) type,
  	                   (GLsizei) bufSize,
  	                   (void *) (data + dataOffset));
  	   */

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  alias of glReadnPixelsEXT
  * C Prototype:
  * void  glReadnPixels ( 
  * 		 GLint   x,
  * 		 GLint   y,
  * 		 GLsizei   width,
  * 		 GLsizei   height,
  * 		 GLenum   format,
  * 		 GLenum   type,
  * 		 GLsizei   bufSize,
  * 		 void * data
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
 void glReadnPixels( int x,
                     int y,
                     int width,
                     int height,
                     int format,
                     int type,
                     int bufSize,
                     java.nio.Buffer data, int dataOffset); /*
	 // jnigen - native goes here
  	 glReadnPixels( (GLint) x,
  	                (GLint) y,
  	                (GLsizei) width,
  	                (GLsizei) height,
  	                (GLenum) format,
  	                (GLenum) type,
  	                (GLsizei) bufSize,
  	                (void *) (data + dataOffset));
  	   */

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  
  * C Prototype:
  * void  glGetnUniformfvEXT ( 
  * 		 GLuint   program,
  * 		 GLint   location,
  * 		 GLsizei   bufSize,
  * 		 GLfloat  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
 void glGetnUniformfvEXT( int program,
                          int location,
                          int bufSize,
                          java.nio.FloatBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetnUniformfvEXT( (GLuint) program,
  	                     (GLint) location,
  	                     (GLsizei) bufSize,
  	                     (GLfloat  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  
  * C Prototype:
  * void  glGetnUniformfvEXT ( 
  * 		 GLuint   program,
  * 		 GLint   location,
  * 		 GLsizei   bufSize,
  * 		 GLfloat  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
  void glGetnUniformfvEXT( int program,
                           int location,
                           int bufSize,
                           float[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetnUniformfvEXT( (GLuint) program,
  	                     (GLint) location,
  	                     (GLsizei) bufSize,
  	                     (GLfloat  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  
  * C Prototype:
  * void  glGetnUniformivEXT ( 
  * 		 GLuint   program,
  * 		 GLint   location,
  * 		 GLsizei   bufSize,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
  void glGetnUniformivEXT( int program,
                           int location,
                           int bufSize,
                           int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetnUniformivEXT( (GLuint) program,
  	                     (GLint) location,
  	                     (GLsizei) bufSize,
  	                     (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_EXT_robustness
  *  
  * C Prototype:
  * void  glGetnUniformivEXT ( 
  * 		 GLuint   program,
  * 		 GLint   location,
  * 		 GLsizei   bufSize,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt">GL_EXT_robustness</a> 
  **/ 
 public final native static 
 void glGetnUniformivEXT( int program,
                          int location,
                          int bufSize,
                          java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetnUniformivEXT( (GLuint) program,
  	                     (GLint) location,
  	                     (GLsizei) bufSize,
  	                     (GLint  *) (params + paramsOffset));
  	   */
    /**
     * Enumeration for extension: GL_EXT_sRGB
     */
    // enumerations: 
	 public static final int   GL_SRGB_EXT = 0x8C40;
	 public static final int   GL_SRGB_ALPHA_EXT = 0x8C42;
	 public static final int   GL_SRGB8_ALPHA8_EXT = 0x8C43;
	 public static final int   GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;

 
    /**
     * Enumeration for extension: GL_EXT_texture_compression_dxt1
     */
    // enumerations: 
	 public static final int   GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
	 public static final int   GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;

 
    /**
     * Enumeration for extension: GL_EXT_texture_filter_anisotropic
     */
    // enumerations: 
	 public static final int   GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
	 public static final int   GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

 
    /**
     * Enumeration for extension: GL_EXT_texture_format_BGRA8888
     */
    // enumerations: 
	 public static final int   GL_BGRA_EXT = 0x80E1;

 
    /**
     * Enumeration for extension: GL_EXT_texture_lod_bias
     */
    // enumerations: 
	 public static final int   GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
	 public static final int   GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
	 public static final int   GL_TEXTURE_LOD_BIAS_EXT = 0x8501;

 
 // Function(s) for extension GL_EXT_texture_storage, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  
  * C Prototype:
  * void  glTexStorage1DEXT ( 
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTexStorage1DEXT (int target,
                           int levels,
                           int internalformat,
                           int width);/*
	 // jnigen - native goes here
  	 glTexStorage1DEXT( (GLenum) target,
  	                    (GLsizei) levels,
  	                    (GLenum) internalformat,
  	                    (GLsizei) width);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  alias of glTexStorage1DEXT
  * C Prototype:
  * void  glTexStorage1D ( 
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTexStorage1D (int target,
                        int levels,
                        int internalformat,
                        int width);/*
	 // jnigen - native goes here
  	 glTexStorage1D( (GLenum) target,
  	                 (GLsizei) levels,
  	                 (GLenum) internalformat,
  	                 (GLsizei) width);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  
  * C Prototype:
  * void  glTexStorage2DEXT ( 
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTexStorage2DEXT (int target,
                           int levels,
                           int internalformat,
                           int width,
                           int height);/*
	 // jnigen - native goes here
  	 glTexStorage2DEXT( (GLenum) target,
  	                    (GLsizei) levels,
  	                    (GLenum) internalformat,
  	                    (GLsizei) width,
  	                    (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  alias of glTexStorage2DEXT
  * C Prototype:
  * void  glTexStorage2D ( 
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTexStorage2D (int target,
                        int levels,
                        int internalformat,
                        int width,
                        int height);/*
	 // jnigen - native goes here
  	 glTexStorage2D( (GLenum) target,
  	                 (GLsizei) levels,
  	                 (GLenum) internalformat,
  	                 (GLsizei) width,
  	                 (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  
  * C Prototype:
  * void  glTexStorage3DEXT ( 
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height,
  * 		 GLsizei   depth
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTexStorage3DEXT (int target,
                           int levels,
                           int internalformat,
                           int width,
                           int height,
                           int depth);/*
	 // jnigen - native goes here
  	 glTexStorage3DEXT( (GLenum) target,
  	                    (GLsizei) levels,
  	                    (GLenum) internalformat,
  	                    (GLsizei) width,
  	                    (GLsizei) height,
  	                    (GLsizei) depth);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  alias of glTexStorage3DEXT
  * C Prototype:
  * void  glTexStorage3D ( 
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height,
  * 		 GLsizei   depth
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTexStorage3D (int target,
                        int levels,
                        int internalformat,
                        int width,
                        int height,
                        int depth);/*
	 // jnigen - native goes here
  	 glTexStorage3D( (GLenum) target,
  	                 (GLsizei) levels,
  	                 (GLenum) internalformat,
  	                 (GLsizei) width,
  	                 (GLsizei) height,
  	                 (GLsizei) depth);
  	   */
 // Function(s) for extension GL_EXT_texture_storage, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  
  * C Prototype:
  * void  glTextureStorage1DEXT ( 
  * 		 GLuint   texture,
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTextureStorage1DEXT (int texture,
                               int target,
                               int levels,
                               int internalformat,
                               int width);/*
	 // jnigen - native goes here
  	 glTextureStorage1DEXT( (GLuint) texture,
  	                        (GLenum) target,
  	                        (GLsizei) levels,
  	                        (GLenum) internalformat,
  	                        (GLsizei) width);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  
  * C Prototype:
  * void  glTextureStorage2DEXT ( 
  * 		 GLuint   texture,
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTextureStorage2DEXT (int texture,
                               int target,
                               int levels,
                               int internalformat,
                               int width,
                               int height);/*
	 // jnigen - native goes here
  	 glTextureStorage2DEXT( (GLuint) texture,
  	                        (GLenum) target,
  	                        (GLsizei) levels,
  	                        (GLenum) internalformat,
  	                        (GLsizei) width,
  	                        (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_EXT_texture_storage
  *  
  * C Prototype:
  * void  glTextureStorage3DEXT ( 
  * 		 GLuint   texture,
  * 		 GLenum   target,
  * 		 GLsizei   levels,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height,
  * 		 GLsizei   depth
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt">GL_EXT_texture_storage</a> 
  **/ 
 public final native static 
  void glTextureStorage3DEXT (int texture,
                               int target,
                               int levels,
                               int internalformat,
                               int width,
                               int height,
                               int depth);/*
	 // jnigen - native goes here
  	 glTextureStorage3DEXT( (GLuint) texture,
  	                        (GLenum) target,
  	                        (GLsizei) levels,
  	                        (GLenum) internalformat,
  	                        (GLsizei) width,
  	                        (GLsizei) height,
  	                        (GLsizei) depth);
  	   */
    /**
     * Enumeration for extension: GL_IMG_multisampled_render_to_texture
     */
    // enumerations: 
	 public static final int   GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
	 public static final int   GL_MAX_SAMPLES_IMG = 0x9135;
	 public static final int   GL_TEXTURE_SAMPLES_IMG = 0x9136;

 
 // Function(s) for extension GL_IMG_multisampled_render_to_texture, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_IMG_multisampled_render_to_texture
  *  
  * C Prototype:
  * void  glRenderbufferStorageMultisampleIMG ( 
  * 		 GLenum   target,
  * 		 GLsizei   samples,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/IMG/IMG_multisampled_render_to_texture.txt">GL_IMG_multisampled_render_to_texture</a> 
  **/ 
 public final native static 
  void glRenderbufferStorageMultisampleIMG (int target,
                                             int samples,
                                             int internalformat,
                                             int width,
                                             int height);/*
	 // jnigen - native goes here
  	 glRenderbufferStorageMultisampleIMG( (GLenum) target,
  	                                      (GLsizei) samples,
  	                                      (GLenum) internalformat,
  	                                      (GLsizei) width,
  	                                      (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_IMG_multisampled_render_to_texture
  *  
  * C Prototype:
  * void  glFramebufferTexture2DMultisampleIMG ( 
  * 		 GLenum   target,
  * 		 GLenum   attachment,
  * 		 GLenum   textarget,
  * 		 GLuint   texture,
  * 		 GLint   level,
  * 		 GLsizei   samples
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/IMG/IMG_multisampled_render_to_texture.txt">GL_IMG_multisampled_render_to_texture</a> 
  **/ 
 public final native static 
  void glFramebufferTexture2DMultisampleIMG (int target,
                                              int attachment,
                                              int textarget,
                                              int texture,
                                              int level,
                                              int samples);/*
	 // jnigen - native goes here
  	 glFramebufferTexture2DMultisampleIMG( (GLenum) target,
  	                                       (GLenum) attachment,
  	                                       (GLenum) textarget,
  	                                       (GLuint) texture,
  	                                       (GLint) level,
  	                                       (GLsizei) samples);
  	   */
    /**
     * Enumeration for extension: GL_IMG_read_format
     */
    // enumerations: 
	 public static final int   GL_BGRA_IMG = 0x80E1;
	 public static final int   GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;

 
    /**
     * Enumeration for extension: GL_IMG_texture_compression_pvrtc
     */
    // enumerations: 
	 public static final int   GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
	 public static final int   GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
	 public static final int   GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
	 public static final int   GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;

 
    /**
     * Enumeration for extension: GL_IMG_texture_env_enhanced_fixed_function
     */
    // enumerations: 
	 public static final int   GL_MODULATE_COLOR_IMG = 0x8C04;
	 public static final int   GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05;
	 public static final int   GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06;
	 public static final int   GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07;
	 public static final int   GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08;
	 public static final int   GL_ADD_BLEND_IMG = 0x8C09;
	 public static final int   GL_DOT3_RGBA_IMG = 0x86AF;

 
    /**
     * Enumeration for extension: GL_IMG_user_clip_plane
     */
    // enumerations: 
	 public static final int   GL_CLIP_PLANE0_IMG = 0x3000;
	 public static final int   GL_CLIP_PLANE1_IMG = 0x3001;
	 public static final int   GL_CLIP_PLANE2_IMG = 0x3002;
	 public static final int   GL_CLIP_PLANE3_IMG = 0x3003;
	 public static final int   GL_CLIP_PLANE4_IMG = 0x3004;
	 public static final int   GL_CLIP_PLANE5_IMG = 0x3005;
	 public static final int   GL_MAX_CLIP_PLANES_IMG = 0x0D32;

 
 // Function(s) for extension GL_IMG_user_clip_plane, API: gles1   

 /**<pre>
  *  Extension: GL_IMG_user_clip_plane
  *  
  * C Prototype:
  * void  glClipPlanefIMG ( 
  * 		 GLenum   p,
  * 		 const  GLfloat  * eqn
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/IMG/IMG_user_clip_plane.txt">GL_IMG_user_clip_plane</a> 
  **/ 
 public final native static 
  void glClipPlanefIMG( int p,
                        final float [] eqn, int eqnOffset);/*
	 // jnigen - native goes here
  	 glClipPlanefIMG( (GLenum) p,
  	                  (const  GLfloat  *) (eqn + eqnOffset));
  	   */

 /**<pre>
  *  Extension: GL_IMG_user_clip_plane
  *  
  * C Prototype:
  * void  glClipPlanefIMG ( 
  * 		 GLenum   p,
  * 		 const  GLfloat  * eqn
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/IMG/IMG_user_clip_plane.txt">GL_IMG_user_clip_plane</a> 
  **/ 
 public final native static 
 void glClipPlanefIMG( int p,
                       java.nio.FloatBuffer eqn, int eqnOffset); /*
	 // jnigen - native goes here
  	 glClipPlanefIMG( (GLenum) p,
  	                  (const  GLfloat  *) (eqn + eqnOffset));
  	   */

 /**<pre>
  *  Extension: GL_IMG_user_clip_plane
  *  
  * C Prototype:
  * void  glClipPlanexIMG ( 
  * 		 GLenum   p,
  * 		 const  GLfixed  * eqn
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/IMG/IMG_user_clip_plane.txt">GL_IMG_user_clip_plane</a> 
  **/ 
 public final native static 
 void glClipPlanexIMG( int p,
                       java.nio.IntBuffer eqn, int eqnOffset); /*
	 // jnigen - native goes here
  	 glClipPlanexIMG( (GLenum) p,
  	                  (const  GLfixed  *) (eqn + eqnOffset));
  	   */

 /**<pre>
  *  Extension: GL_IMG_user_clip_plane
  *  
  * C Prototype:
  * void  glClipPlanexIMG ( 
  * 		 GLenum   p,
  * 		 const  GLfixed  * eqn
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/IMG/IMG_user_clip_plane.txt">GL_IMG_user_clip_plane</a> 
  **/ 
 public final native static 
  void glClipPlanexIMG( int p,
                        final int [] eqn, int eqnOffset);/*
	 // jnigen - native goes here
  	 glClipPlanexIMG( (GLenum) p,
  	                  (const  GLfixed  *) (eqn + eqnOffset));
  	   */
    /**
     * Enumeration for extension: GL_NV_fence
     */
    // enumerations: 
	 public static final int   GL_ALL_COMPLETED_NV = 0x84F2;
	 public static final int   GL_FENCE_STATUS_NV = 0x84F3;
	 public static final int   GL_FENCE_CONDITION_NV = 0x84F4;

 
 // Function(s) for extension GL_NV_fence, API: gl|gles1|gles2   

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glDeleteFencesNV ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * fences // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
 void glDeleteFencesNV( int n,
                        java.nio.IntBuffer fences, int fencesOffset); /*
	 // jnigen - native goes here
  	 glDeleteFencesNV( (GLsizei) n,
  	                   (const  GLuint  *) (fences + fencesOffset));
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glDeleteFencesNV ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * fences // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  void glDeleteFencesNV( int n,
                         final int [] fences	/*   group=FenceNV */, int fencesOffset);/*
	 // jnigen - native goes here
  	 glDeleteFencesNV( (GLsizei) n,
  	                   (const  GLuint  *) (fences + fencesOffset));
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glGenFencesNV ( 
  * 		 GLsizei   n,
  * 		 GLuint  * fences // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  void glGenFencesNV( int n,
                      int[] fences	/*   group=FenceNV */, int fencesOffset);/*
	 // jnigen - native goes here
  	 glGenFencesNV( (GLsizei) n,
  	                (GLuint  *) (fences + fencesOffset));
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glGenFencesNV ( 
  * 		 GLsizei   n,
  * 		 GLuint  * fences // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
 void glGenFencesNV( int n,
                     java.nio.IntBuffer fences, int fencesOffset); /*
	 // jnigen - native goes here
  	 glGenFencesNV( (GLsizei) n,
  	                (GLuint  *) (fences + fencesOffset));
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  *   GLboolean glIsFenceNV ( 
  * 		 GLuint   fence // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  boolean glIsFenceNV (int fence	/*   group=FenceNV */);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsFenceNV( (GLuint) fence);
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  *   GLboolean glTestFenceNV ( 
  * 		 GLuint   fence // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  boolean glTestFenceNV (int fence	/*   group=FenceNV */);/*
	 // jnigen - native goes here
  	   return (jboolean)  glTestFenceNV( (GLuint) fence);
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glGetFenceivNV ( 
  * 		 GLuint   fence, // group=FenceNV  
  * 		 GLenum   pname, // group=FenceParameterNameNV  
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
 void glGetFenceivNV( int fence	/*   group=FenceNV */,
                      int pname	/*   group=FenceParameterNameNV */,
                      java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetFenceivNV( (GLuint) fence,
  	                 (GLenum) pname,
  	                 (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glGetFenceivNV ( 
  * 		 GLuint   fence, // group=FenceNV  
  * 		 GLenum   pname, // group=FenceParameterNameNV  
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  void glGetFenceivNV( int fence	/*   group=FenceNV */,
                       int pname	/*   group=FenceParameterNameNV */,
                       int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetFenceivNV( (GLuint) fence,
  	                 (GLenum) pname,
  	                 (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glFinishFenceNV ( 
  * 		 GLuint   fence // group=FenceNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  void glFinishFenceNV (int fence	/*   group=FenceNV */);/*
	 // jnigen - native goes here
  	 glFinishFenceNV( (GLuint) fence);
  	   */

 /**<pre>
  *  Extension: GL_NV_fence
  *  
  * C Prototype:
  * void  glSetFenceNV ( 
  * 		 GLuint   fence, // group=FenceNV  
  * 		 GLenum   condition // group=FenceConditionNV  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/NV/fence.txt">GL_NV_fence</a> 
  **/ 
 public final native static 
  void glSetFenceNV (int fence	/*   group=FenceNV */,
                      int condition	/*   group=FenceConditionNV */);/*
	 // jnigen - native goes here
  	 glSetFenceNV( (GLuint) fence,
  	               (GLenum) condition);
  	   */
 // Function(s) for extension GL_OES_EGL_image, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_OES_EGL_image
  *  
  * C Prototype:
  * void  glEGLImageTargetTexture2DOES ( 
  * 		 GLenum   target,
  * 		 GLeglImageOES   image
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_Eimage.txt">GL_OES_EGL_image</a> 
  **/ 
 public final native static 
  void glEGLImageTargetTexture2DOES (int target,
                                     long /* GLeglImageOES*/ image);/*
	 // jnigen - native goes here
  	 glEGLImageTargetTexture2DOES( (GLenum) target,
  	                               (GLeglImageOES) image);
  	   */

 /**<pre>
  *  Extension: GL_OES_EGL_image
  *  
  * C Prototype:
  * void  glEGLImageTargetRenderbufferStorageOES ( 
  * 		 GLenum   target,
  * 		 GLeglImageOES   image
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_Eimage.txt">GL_OES_EGL_image</a> 
  **/ 
 public final native static 
  void glEGLImageTargetRenderbufferStorageOES (int target,
                                               long  /*GLeglImageOES*/ image);/*
	 // jnigen - native goes here
  	 glEGLImageTargetRenderbufferStorageOES( (GLenum) target,
  	                                         (GLeglImageOES) image);
  	   */
    /**
     * Enumeration for extension: GL_OES_EGL_image_external
     */
    // enumerations: 
	 public static final int   GL_TEXTURE_EXTERNAL_OES = 0x8D65;
	 public static final int   GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
	 public static final int   GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;

 
    /**
     * Enumeration for extension: GL_OES_blend_equation_separate
     */
    // enumerations: 
	 public static final int   GL_BLEND_EQUATION_RGB_OES = 0x8009;
	 public static final int   GL_BLEND_EQUATION_ALPHA_OES = 0x883D;

 
 // Function(s) for extension GL_OES_blend_equation_separate, API: gles1   

 /**<pre>
  *  Extension: GL_OES_blend_equation_separate
  *  
  * C Prototype:
  * void  glBlendEquationSeparateOES ( 
  * 		 GLenum   modeRGB,
  * 		 GLenum   modeAlpha
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_blend_equation_separate.txt">GL_OES_blend_equation_separate</a> 
  **/ 
 public final native static 
  void glBlendEquationSeparateOES (int modeRGB,
                                    int modeAlpha);/*
	 // jnigen - native goes here
  	 glBlendEquationSeparateOES( (GLenum) modeRGB,
  	                             (GLenum) modeAlpha);
  	   */
    /**
     * Enumeration for extension: GL_OES_blend_func_separate
     */
    // enumerations: 
	 public static final int   GL_BLEND_DST_RGB_OES = 0x80C8;
	 public static final int   GL_BLEND_SRC_RGB_OES = 0x80C9;
	 public static final int   GL_BLEND_DST_ALPHA_OES = 0x80CA;
	 public static final int   GL_BLEND_SRC_ALPHA_OES = 0x80CB;

 
 // Function(s) for extension GL_OES_blend_func_separate, API: gles1   

 /**<pre>
  *  Extension: GL_OES_blend_func_separate
  *  
  * C Prototype:
  * void  glBlendFuncSeparateOES ( 
  * 		 GLenum   srcRGB,
  * 		 GLenum   dstRGB,
  * 		 GLenum   srcAlpha,
  * 		 GLenum   dstAlpha
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_blend_func_separate.txt">GL_OES_blend_func_separate</a> 
  **/ 
 public final native static 
  void glBlendFuncSeparateOES (int srcRGB,
                                int dstRGB,
                                int srcAlpha,
                                int dstAlpha);/*
	 // jnigen - native goes here
  	 glBlendFuncSeparateOES( (GLenum) srcRGB,
  	                         (GLenum) dstRGB,
  	                         (GLenum) srcAlpha,
  	                         (GLenum) dstAlpha);
  	   */
    /**
     * Enumeration for extension: GL_OES_blend_subtract
     */
    // enumerations: 
	 public static final int   GL_BLEND_EQUATION_OES = 0x8009;
	 public static final int   GL_FUNC_ADD_OES = 0x8006;
	 public static final int   GL_FUNC_SUBTRACT_OES = 0x800A;
	 public static final int   GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B;

 
 // Function(s) for extension GL_OES_blend_subtract, API: gles1   

 /**<pre>
  *  Extension: GL_OES_blend_subtract
  *  
  * C Prototype:
  * void  glBlendEquationOES ( 
  * 		 GLenum   mode
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_blend_subtract.txt">GL_OES_blend_subtract</a> 
  **/ 
 public final native static 
  void glBlendEquationOES (int mode);/*
	 // jnigen - native goes here
  	 glBlendEquationOES( (GLenum) mode);
  	   */
    /**
     * Enumeration for extension: GL_OES_compressed_ETC1_RGB8_texture
     */
    // enumerations: 
	 public static final int   GL_ETC1_RGB8_OES = 0x8D64;

 
    /**
     * Enumeration for extension: GL_OES_compressed_paletted_texture
     */
    // enumerations: 
	 public static final int   GL_PALETTE4_RGB8_OES = 0x8B90;
	 public static final int   GL_PALETTE4_RGBA8_OES = 0x8B91;
	 public static final int   GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
	 public static final int   GL_PALETTE4_RGBA4_OES = 0x8B93;
	 public static final int   GL_PALETTE4_RGB5_A1_OES = 0x8B94;
	 public static final int   GL_PALETTE8_RGB8_OES = 0x8B95;
	 public static final int   GL_PALETTE8_RGBA8_OES = 0x8B96;
	 public static final int   GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
	 public static final int   GL_PALETTE8_RGBA4_OES = 0x8B98;
	 public static final int   GL_PALETTE8_RGB5_A1_OES = 0x8B99;

 
    /**
     * Enumeration for extension: GL_OES_depth24
     */
    // enumerations: 
 //	 public static final int   GL_DEPTH_COMPONENT24_OES = 0x81A6;

 
    /**
     * Enumeration for extension: GL_OES_depth32
     */
    // enumerations: 
//	 public static final int   GL_DEPTH_COMPONENT32_OES = 0x81A7;

 
    /**
     * Enumeration for extension: GL_OES_draw_texture
     */
    // enumerations: 
	 public static final int   GL_TEXTURE_CROP_RECT_OES = 0x8B9D;

 
 // Function(s) for extension GL_OES_draw_texture, API: gles1   

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexsOES ( 
  * 		 GLshort   x,
  * 		 GLshort   y,
  * 		 GLshort   z,
  * 		 GLshort   width,
  * 		 GLshort   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexsOES (short x,
                       short y,
                       short z,
                       short width,
                       short height);/*
	 // jnigen - native goes here
  	 glDrawTexsOES( (GLshort) x,
  	                (GLshort) y,
  	                (GLshort) z,
  	                (GLshort) width,
  	                (GLshort) height);
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexiOES ( 
  * 		 GLint   x,
  * 		 GLint   y,
  * 		 GLint   z,
  * 		 GLint   width,
  * 		 GLint   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexiOES (int x,
                       int y,
                       int z,
                       int width,
                       int height);/*
	 // jnigen - native goes here
  	 glDrawTexiOES( (GLint) x,
  	                (GLint) y,
  	                (GLint) z,
  	                (GLint) width,
  	                (GLint) height);
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexxOES ( 
  * 		 GLfixed   x,
  * 		 GLfixed   y,
  * 		 GLfixed   z,
  * 		 GLfixed   width,
  * 		 GLfixed   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexxOES (int x,
                       int y,
                       int z,
                       int width,
                       int height);/*
	 // jnigen - native goes here
  	 glDrawTexxOES( (GLfixed) x,
  	                (GLfixed) y,
  	                (GLfixed) z,
  	                (GLfixed) width,
  	                (GLfixed) height);
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexsvOES ( 
  * 		 const  GLshort  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
 void glDrawTexsvOES( java.nio.ShortBuffer coords, int coordsOffset); /*
	 // jnigen - native goes here
  	 glDrawTexsvOES( (const  GLshort  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexsvOES ( 
  * 		 const  GLshort  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexsvOES( final short [] coords, int coordsOffset);/*
	 // jnigen - native goes here
  	 glDrawTexsvOES( (const  GLshort  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexivOES ( 
  * 		 const  GLint  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
 void glDrawTexivOES( java.nio.IntBuffer coords, int coordsOffset); /*
	 // jnigen - native goes here
  	 glDrawTexivOES( (const  GLint  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexivOES ( 
  * 		 const  GLint  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexivOES( final int [] coords, int coordsOffset);/*
	 // jnigen - native goes here
  	 glDrawTexivOES( (const  GLint  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexxvOES ( 
  * 		 const  GLfixed  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
 void glDrawTexxvOES( java.nio.IntBuffer coords, int coordsOffset); /*
	 // jnigen - native goes here
  	 glDrawTexxvOES( (const  GLfixed  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexxvOES ( 
  * 		 const  GLfixed  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexxvOES( final int [] coords, int coordsOffset);/*
	 // jnigen - native goes here
  	 glDrawTexxvOES( (const  GLfixed  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexfOES ( 
  * 		 GLfloat   x,
  * 		 GLfloat   y,
  * 		 GLfloat   z,
  * 		 GLfloat   width,
  * 		 GLfloat   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexfOES (float x,
                       float y,
                       float z,
                       float width,
                       float height);/*
	 // jnigen - native goes here
  	 glDrawTexfOES( (GLfloat) x,
  	                (GLfloat) y,
  	                (GLfloat) z,
  	                (GLfloat) width,
  	                (GLfloat) height);
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexfvOES ( 
  * 		 const  GLfloat  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
  void glDrawTexfvOES( final float [] coords, int coordsOffset);/*
	 // jnigen - native goes here
  	 glDrawTexfvOES( (const  GLfloat  *) (coords + coordsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_draw_texture
  *  
  * C Prototype:
  * void  glDrawTexfvOES ( 
  * 		 const  GLfloat  * coords
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_draw_texture.txt">GL_OES_draw_texture</a> 
  **/ 
 public final native static 
 void glDrawTexfvOES( java.nio.FloatBuffer coords, int coordsOffset); /*
	 // jnigen - native goes here
  	 glDrawTexfvOES( (const  GLfloat  *) (coords + coordsOffset));
  	   */
    /**
     * Enumeration for extension: GL_OES_element_index_uint
     */
    // enumerations: 
	 public static final int   GL_UNSIGNED_INT = 0x1405;

 
 // Function(s) for extension GL_OES_fixed_point, API: gl|gles1   

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glAlphaFuncxOES ( 
  * 		 GLenum   func,
  * 		 GLfixed   ref // group=ClampedFixed  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glAlphaFuncxOES (int func,
                         int ref	/*   group=ClampedFixed */);/*
	 // jnigen - native goes here
  	 glAlphaFuncxOES( (GLenum) func,
  	                  (GLfixed) ref);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glClearColorxOES ( 
  * 		 GLfixed   red, // group=ClampedFixed  
  * 		 GLfixed   green, // group=ClampedFixed  
  * 		 GLfixed   blue, // group=ClampedFixed  
  * 		 GLfixed   alpha // group=ClampedFixed  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glClearColorxOES (int red	/*   group=ClampedFixed */,
                          int green	/*   group=ClampedFixed */,
                          int blue	/*   group=ClampedFixed */,
                          int alpha	/*   group=ClampedFixed */);/*
	 // jnigen - native goes here
  	 glClearColorxOES( (GLfixed) red,
  	                   (GLfixed) green,
  	                   (GLfixed) blue,
  	                   (GLfixed) alpha);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glClearDepthxOES ( 
  * 		 GLfixed   depth // group=ClampedFixed  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glClearDepthxOES (int depth	/*   group=ClampedFixed */);/*
	 // jnigen - native goes here
  	 glClearDepthxOES( (GLfixed) depth);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glClipPlanexOES ( 
  * 		 GLenum   plane,
  * 		 const  GLfixed  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glClipPlanexOES( int plane,
                       java.nio.IntBuffer equation, int equationOffset); /*
	 // jnigen - native goes here
  	 glClipPlanexOES( (GLenum) plane,
  	                  (const  GLfixed  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glClipPlanexOES ( 
  * 		 GLenum   plane,
  * 		 const  GLfixed  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glClipPlanexOES( int plane,
                        final int [] equation, int equationOffset);/*
	 // jnigen - native goes here
  	 glClipPlanexOES( (GLenum) plane,
  	                  (const  GLfixed  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glColor4xOES ( 
  * 		 GLfixed   red,
  * 		 GLfixed   green,
  * 		 GLfixed   blue,
  * 		 GLfixed   alpha
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glColor4xOES (int red,
                      int green,
                      int blue,
                      int alpha);/*
	 // jnigen - native goes here
  	 glColor4xOES( (GLfixed) red,
  	               (GLfixed) green,
  	               (GLfixed) blue,
  	               (GLfixed) alpha);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glDepthRangexOES ( 
  * 		 GLfixed   n, // group=ClampedFixed  
  * 		 GLfixed   f // group=ClampedFixed  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glDepthRangexOES (int n	/*   group=ClampedFixed */,
                          int f	/*   group=ClampedFixed */);/*
	 // jnigen - native goes here
  	 glDepthRangexOES( (GLfixed) n,
  	                   (GLfixed) f);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glFogxOES ( 
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glFogxOES (int pname,
                   int param);/*
	 // jnigen - native goes here
  	 glFogxOES( (GLenum) pname,
  	            (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glFogxvOES ( 
  * 		 GLenum   pname,
  * 		 const  GLfixed  * param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glFogxvOES( int pname,
                   final int [] param, int paramOffset);/*
	 // jnigen - native goes here
  	 glFogxvOES( (GLenum) pname,
  	             (const  GLfixed  *) (param + paramOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glFogxvOES ( 
  * 		 GLenum   pname,
  * 		 const  GLfixed  * param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glFogxvOES( int pname,
                  java.nio.IntBuffer param, int paramOffset); /*
	 // jnigen - native goes here
  	 glFogxvOES( (GLenum) pname,
  	             (const  GLfixed  *) (param + paramOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glFrustumxOES ( 
  * 		 GLfixed   l,
  * 		 GLfixed   r,
  * 		 GLfixed   b,
  * 		 GLfixed   t,
  * 		 GLfixed   n,
  * 		 GLfixed   f
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glFrustumxOES (int l,
                       int r,
                       int b,
                       int t,
                       int n,
                       int f);/*
	 // jnigen - native goes here
  	 glFrustumxOES( (GLfixed) l,
  	                (GLfixed) r,
  	                (GLfixed) b,
  	                (GLfixed) t,
  	                (GLfixed) n,
  	                (GLfixed) f);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetClipPlanexOES ( 
  * 		 GLenum   plane,
  * 		 GLfixed  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glGetClipPlanexOES( int plane,
                           int[] equation, int equationOffset);/*
	 // jnigen - native goes here
  	 glGetClipPlanexOES( (GLenum) plane,
  	                     (GLfixed  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetClipPlanexOES ( 
  * 		 GLenum   plane,
  * 		 GLfixed  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glGetClipPlanexOES( int plane,
                          java.nio.IntBuffer equation, int equationOffset); /*
	 // jnigen - native goes here
  	 glGetClipPlanexOES( (GLenum) plane,
  	                     (GLfixed  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetFixedvOES ( 
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glGetFixedvOES( int pname,
                       int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetFixedvOES( (GLenum) pname,
  	                 (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetFixedvOES ( 
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glGetFixedvOES( int pname,
                      java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetFixedvOES( (GLenum) pname,
  	                 (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetTexEnvxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glGetTexEnvxvOES( int target,
                        int pname,
                        java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetTexEnvxvOES( (GLenum) target,
  	                   (GLenum) pname,
  	                   (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetTexEnvxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glGetTexEnvxvOES( int target,
                         int pname,
                         int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetTexEnvxvOES( (GLenum) target,
  	                   (GLenum) pname,
  	                   (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetTexParameterxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glGetTexParameterxvOES( int target,
                              int pname,
                              java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetTexParameterxvOES( (GLenum) target,
  	                         (GLenum) pname,
  	                         (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetTexParameterxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glGetTexParameterxvOES( int target,
                               int pname,
                               int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetTexParameterxvOES( (GLenum) target,
  	                         (GLenum) pname,
  	                         (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLightModelxOES ( 
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glLightModelxOES (int pname,
                          int param);/*
	 // jnigen - native goes here
  	 glLightModelxOES( (GLenum) pname,
  	                   (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLightModelxvOES ( 
  * 		 GLenum   pname,
  * 		 const  GLfixed  * param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glLightModelxvOES( int pname,
                         java.nio.IntBuffer param, int paramOffset); /*
	 // jnigen - native goes here
  	 glLightModelxvOES( (GLenum) pname,
  	                    (const  GLfixed  *) (param + paramOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLightModelxvOES ( 
  * 		 GLenum   pname,
  * 		 const  GLfixed  * param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glLightModelxvOES( int pname,
                          final int [] param, int paramOffset);/*
	 // jnigen - native goes here
  	 glLightModelxvOES( (GLenum) pname,
  	                    (const  GLfixed  *) (param + paramOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLightxOES ( 
  * 		 GLenum   light,
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glLightxOES (int light,
                     int pname,
                     int param);/*
	 // jnigen - native goes here
  	 glLightxOES( (GLenum) light,
  	              (GLenum) pname,
  	              (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLightxvOES ( 
  * 		 GLenum   light,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glLightxvOES( int light,
                    int pname,
                    java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glLightxvOES( (GLenum) light,
  	               (GLenum) pname,
  	               (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLightxvOES ( 
  * 		 GLenum   light,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glLightxvOES( int light,
                     int pname,
                     final int [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glLightxvOES( (GLenum) light,
  	               (GLenum) pname,
  	               (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLineWidthxOES ( 
  * 		 GLfixed   width
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glLineWidthxOES (int width);/*
	 // jnigen - native goes here
  	 glLineWidthxOES( (GLfixed) width);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLoadMatrixxOES ( 
  * 		 const  GLfixed  * m
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glLoadMatrixxOES( java.nio.IntBuffer m, int mOffset); /*
	 // jnigen - native goes here
  	 glLoadMatrixxOES( (const  GLfixed  *) (m + mOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glLoadMatrixxOES ( 
  * 		 const  GLfixed  * m
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glLoadMatrixxOES( final int [] m, int mOffset);/*
	 // jnigen - native goes here
  	 glLoadMatrixxOES( (const  GLfixed  *) (m + mOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glMaterialxOES ( 
  * 		 GLenum   face,
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glMaterialxOES (int face,
                        int pname,
                        int param);/*
	 // jnigen - native goes here
  	 glMaterialxOES( (GLenum) face,
  	                 (GLenum) pname,
  	                 (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glMaterialxvOES ( 
  * 		 GLenum   face,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glMaterialxvOES( int face,
                        int pname,
                        final int [] param, int paramOffset);/*
	 // jnigen - native goes here
  	 glMaterialxvOES( (GLenum) face,
  	                  (GLenum) pname,
  	                  (const  GLfixed  *) (param + paramOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glMaterialxvOES ( 
  * 		 GLenum   face,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glMaterialxvOES( int face,
                       int pname,
                       java.nio.IntBuffer param, int paramOffset); /*
	 // jnigen - native goes here
  	 glMaterialxvOES( (GLenum) face,
  	                  (GLenum) pname,
  	                  (const  GLfixed  *) (param + paramOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glMultMatrixxOES ( 
  * 		 const  GLfixed  * m
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glMultMatrixxOES( java.nio.IntBuffer m, int mOffset); /*
	 // jnigen - native goes here
  	 glMultMatrixxOES( (const  GLfixed  *) (m + mOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glMultMatrixxOES ( 
  * 		 const  GLfixed  * m
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glMultMatrixxOES( final int [] m, int mOffset);/*
	 // jnigen - native goes here
  	 glMultMatrixxOES( (const  GLfixed  *) (m + mOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glMultiTexCoord4xOES ( 
  * 		 GLenum   texture,
  * 		 GLfixed   s,
  * 		 GLfixed   t,
  * 		 GLfixed   r,
  * 		 GLfixed   q
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glMultiTexCoord4xOES (int texture,
                              int s,
                              int t,
                              int r,
                              int q);/*
	 // jnigen - native goes here
  	 glMultiTexCoord4xOES( (GLenum) texture,
  	                       (GLfixed) s,
  	                       (GLfixed) t,
  	                       (GLfixed) r,
  	                       (GLfixed) q);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glNormal3xOES ( 
  * 		 GLfixed   nx,
  * 		 GLfixed   ny,
  * 		 GLfixed   nz
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glNormal3xOES (int nx,
                       int ny,
                       int nz);/*
	 // jnigen - native goes here
  	 glNormal3xOES( (GLfixed) nx,
  	                (GLfixed) ny,
  	                (GLfixed) nz);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glOrthoxOES ( 
  * 		 GLfixed   l,
  * 		 GLfixed   r,
  * 		 GLfixed   b,
  * 		 GLfixed   t,
  * 		 GLfixed   n,
  * 		 GLfixed   f
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glOrthoxOES (int l,
                     int r,
                     int b,
                     int t,
                     int n,
                     int f);/*
	 // jnigen - native goes here
  	 glOrthoxOES( (GLfixed) l,
  	              (GLfixed) r,
  	              (GLfixed) b,
  	              (GLfixed) t,
  	              (GLfixed) n,
  	              (GLfixed) f);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glPointParameterxvOES ( 
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glPointParameterxvOES( int pname,
                             java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glPointParameterxvOES( (GLenum) pname,
  	                        (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glPointParameterxvOES ( 
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glPointParameterxvOES( int pname,
                              final int [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glPointParameterxvOES( (GLenum) pname,
  	                        (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glPointSizexOES ( 
  * 		 GLfixed   size
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glPointSizexOES (int size);/*
	 // jnigen - native goes here
  	 glPointSizexOES( (GLfixed) size);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glPolygonOffsetxOES ( 
  * 		 GLfixed   factor,
  * 		 GLfixed   units
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glPolygonOffsetxOES (int factor,
                             int units);/*
	 // jnigen - native goes here
  	 glPolygonOffsetxOES( (GLfixed) factor,
  	                      (GLfixed) units);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glRotatexOES ( 
  * 		 GLfixed   angle,
  * 		 GLfixed   x,
  * 		 GLfixed   y,
  * 		 GLfixed   z
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glRotatexOES (int angle,
                      int x,
                      int y,
                      int z);/*
	 // jnigen - native goes here
  	 glRotatexOES( (GLfixed) angle,
  	               (GLfixed) x,
  	               (GLfixed) y,
  	               (GLfixed) z);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glScalexOES ( 
  * 		 GLfixed   x,
  * 		 GLfixed   y,
  * 		 GLfixed   z
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glScalexOES (int x,
                     int y,
                     int z);/*
	 // jnigen - native goes here
  	 glScalexOES( (GLfixed) x,
  	              (GLfixed) y,
  	              (GLfixed) z);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTexEnvxOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glTexEnvxOES (int target,
                      int pname,
                      int param);/*
	 // jnigen - native goes here
  	 glTexEnvxOES( (GLenum) target,
  	               (GLenum) pname,
  	               (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTexEnvxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glTexEnvxvOES( int target,
                      int pname,
                      final int [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glTexEnvxvOES( (GLenum) target,
  	                (GLenum) pname,
  	                (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTexEnvxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glTexEnvxvOES( int target,
                     int pname,
                     java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glTexEnvxvOES( (GLenum) target,
  	                (GLenum) pname,
  	                (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTexParameterxOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glTexParameterxOES (int target,
                            int pname,
                            int param);/*
	 // jnigen - native goes here
  	 glTexParameterxOES( (GLenum) target,
  	                     (GLenum) pname,
  	                     (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTexParameterxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glTexParameterxvOES( int target,
                           int pname,
                           java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glTexParameterxvOES( (GLenum) target,
  	                      (GLenum) pname,
  	                      (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTexParameterxvOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glTexParameterxvOES( int target,
                            int pname,
                            final int [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glTexParameterxvOES( (GLenum) target,
  	                      (GLenum) pname,
  	                      (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glTranslatexOES ( 
  * 		 GLfixed   x,
  * 		 GLfixed   y,
  * 		 GLfixed   z
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glTranslatexOES (int x,
                         int y,
                         int z);/*
	 // jnigen - native goes here
  	 glTranslatexOES( (GLfixed) x,
  	                  (GLfixed) y,
  	                  (GLfixed) z);
  	   */
 // Function(s) for extension GL_OES_fixed_point, API: gles1   

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetLightxvOES ( 
  * 		 GLenum   light,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glGetLightxvOES( int light,
                       int pname,
                       java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetLightxvOES( (GLenum) light,
  	                  (GLenum) pname,
  	                  (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetLightxvOES ( 
  * 		 GLenum   light,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glGetLightxvOES( int light,
                        int pname,
                        int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetLightxvOES( (GLenum) light,
  	                  (GLenum) pname,
  	                  (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetMaterialxvOES ( 
  * 		 GLenum   face,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
 void glGetMaterialxvOES( int face,
                          int pname,
                          java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetMaterialxvOES( (GLenum) face,
  	                     (GLenum) pname,
  	                     (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glGetMaterialxvOES ( 
  * 		 GLenum   face,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glGetMaterialxvOES( int face,
                           int pname,
                           int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetMaterialxvOES( (GLenum) face,
  	                     (GLenum) pname,
  	                     (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glPointParameterxOES ( 
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glPointParameterxOES (int pname,
                              int param);/*
	 // jnigen - native goes here
  	 glPointParameterxOES( (GLenum) pname,
  	                       (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_fixed_point
  *  
  * C Prototype:
  * void  glSampleCoveragexOES ( 
  * 		 GLclampx   value,
  * 		 GLboolean   invert
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_fixed_point.txt">GL_OES_fixed_point</a> 
  **/ 
 public final native static 
  void glSampleCoveragexOES (int value,
                              boolean invert);/*
	 // jnigen - native goes here
  	 glSampleCoveragexOES( (GLclampx) value,
  	                       (GLboolean) invert);
  	   */
    /**
     * Enumeration for extension: GL_OES_framebuffer_object
     */
    // enumerations: 
	 public static final int   GL_NONE_OES = 0;
	 public static final int   GL_FRAMEBUFFER_OES = 0x8D40;
	 public static final int   GL_RENDERBUFFER_OES = 0x8D41;
	 public static final int   GL_RGBA4_OES = 0x8056;
	 public static final int   GL_RGB5_A1_OES = 0x8057;
	 public static final int   GL_RGB565_OES = 0x8D62;
	 public static final int   GL_DEPTH_COMPONENT16_OES = 0x81A5;
	 public static final int   GL_RENDERBUFFER_WIDTH_OES = 0x8D42;
	 public static final int   GL_RENDERBUFFER_HEIGHT_OES = 0x8D43;
	 public static final int   GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44;
	 public static final int   GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50;
	 public static final int   GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51;
	 public static final int   GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52;
	 public static final int   GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53;
	 public static final int   GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54;
	 public static final int   GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55;
	 public static final int   GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0;
	 public static final int   GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1;
	 public static final int   GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2;
	 public static final int   GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3;
	 public static final int   GL_COLOR_ATTACHMENT0_OES = 0x8CE0;
	 public static final int   GL_DEPTH_ATTACHMENT_OES = 0x8D00;
	 public static final int   GL_STENCIL_ATTACHMENT_OES = 0x8D20;
	 public static final int   GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9;
	 public static final int   GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA;
	 public static final int   GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD;
	 public static final int   GL_FRAMEBUFFER_BINDING_OES = 0x8CA6;
	 public static final int   GL_RENDERBUFFER_BINDING_OES = 0x8CA7;
	 public static final int   GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8;
	 public static final int   GL_INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506;

 
 // Function(s) for extension GL_OES_framebuffer_object, API: gles1   

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  *   GLboolean glIsRenderbufferOES ( 
  * 		 GLuint   renderbuffer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  boolean glIsRenderbufferOES (int renderbuffer);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsRenderbufferOES( (GLuint) renderbuffer);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glBindRenderbufferOES ( 
  * 		 GLenum   target,
  * 		 GLuint   renderbuffer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glBindRenderbufferOES (int target,
                               int renderbuffer);/*
	 // jnigen - native goes here
  	 glBindRenderbufferOES( (GLenum) target,
  	                        (GLuint) renderbuffer);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glDeleteRenderbuffersOES ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * renderbuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
 void glDeleteRenderbuffersOES( int n,
                                java.nio.IntBuffer renderbuffers, int renderbuffersOffset); /*
	 // jnigen - native goes here
  	 glDeleteRenderbuffersOES( (GLsizei) n,
  	                           (const  GLuint  *) (renderbuffers + renderbuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glDeleteRenderbuffersOES ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * renderbuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glDeleteRenderbuffersOES( int n,
                                 final int [] renderbuffers, int renderbuffersOffset);/*
	 // jnigen - native goes here
  	 glDeleteRenderbuffersOES( (GLsizei) n,
  	                           (const  GLuint  *) (renderbuffers + renderbuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGenRenderbuffersOES ( 
  * 		 GLsizei   n,
  * 		 GLuint  * renderbuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
 void glGenRenderbuffersOES( int n,
                             java.nio.IntBuffer renderbuffers, int renderbuffersOffset); /*
	 // jnigen - native goes here
  	 glGenRenderbuffersOES( (GLsizei) n,
  	                        (GLuint  *) (renderbuffers + renderbuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGenRenderbuffersOES ( 
  * 		 GLsizei   n,
  * 		 GLuint  * renderbuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glGenRenderbuffersOES( int n,
                              int[] renderbuffers, int renderbuffersOffset);/*
	 // jnigen - native goes here
  	 glGenRenderbuffersOES( (GLsizei) n,
  	                        (GLuint  *) (renderbuffers + renderbuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glRenderbufferStorageOES ( 
  * 		 GLenum   target,
  * 		 GLenum   internalformat,
  * 		 GLsizei   width,
  * 		 GLsizei   height
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glRenderbufferStorageOES (int target,
                                  int internalformat,
                                  int width,
                                  int height);/*
	 // jnigen - native goes here
  	 glRenderbufferStorageOES( (GLenum) target,
  	                           (GLenum) internalformat,
  	                           (GLsizei) width,
  	                           (GLsizei) height);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGetRenderbufferParameterivOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glGetRenderbufferParameterivOES( int target,
                                        int pname,
                                        int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetRenderbufferParameterivOES( (GLenum) target,
  	                                  (GLenum) pname,
  	                                  (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGetRenderbufferParameterivOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
 void glGetRenderbufferParameterivOES( int target,
                                       int pname,
                                       java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetRenderbufferParameterivOES( (GLenum) target,
  	                                  (GLenum) pname,
  	                                  (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  *   GLboolean glIsFramebufferOES ( 
  * 		 GLuint   framebuffer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  boolean glIsFramebufferOES (int framebuffer);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsFramebufferOES( (GLuint) framebuffer);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glBindFramebufferOES ( 
  * 		 GLenum   target,
  * 		 GLuint   framebuffer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glBindFramebufferOES (int target,
                              int framebuffer);/*
	 // jnigen - native goes here
  	 glBindFramebufferOES( (GLenum) target,
  	                       (GLuint) framebuffer);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glDeleteFramebuffersOES ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * framebuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glDeleteFramebuffersOES( int n,
                                final int [] framebuffers, int framebuffersOffset);/*
	 // jnigen - native goes here
  	 glDeleteFramebuffersOES( (GLsizei) n,
  	                          (const  GLuint  *) (framebuffers + framebuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glDeleteFramebuffersOES ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * framebuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
 void glDeleteFramebuffersOES( int n,
                               java.nio.IntBuffer framebuffers, int framebuffersOffset); /*
	 // jnigen - native goes here
  	 glDeleteFramebuffersOES( (GLsizei) n,
  	                          (const  GLuint  *) (framebuffers + framebuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGenFramebuffersOES ( 
  * 		 GLsizei   n,
  * 		 GLuint  * framebuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
 void glGenFramebuffersOES( int n,
                            java.nio.IntBuffer framebuffers, int framebuffersOffset); /*
	 // jnigen - native goes here
  	 glGenFramebuffersOES( (GLsizei) n,
  	                       (GLuint  *) (framebuffers + framebuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGenFramebuffersOES ( 
  * 		 GLsizei   n,
  * 		 GLuint  * framebuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glGenFramebuffersOES( int n,
                             int[] framebuffers, int framebuffersOffset);/*
	 // jnigen - native goes here
  	 glGenFramebuffersOES( (GLsizei) n,
  	                       (GLuint  *) (framebuffers + framebuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  *   GLenum glCheckFramebufferStatusOES ( 
  * 		 GLenum   target
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  int glCheckFramebufferStatusOES (int target);/*
	 // jnigen - native goes here
  	   return (jint)  glCheckFramebufferStatusOES( (GLenum) target);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glFramebufferRenderbufferOES ( 
  * 		 GLenum   target,
  * 		 GLenum   attachment,
  * 		 GLenum   renderbuffertarget,
  * 		 GLuint   renderbuffer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glFramebufferRenderbufferOES (int target,
                                      int attachment,
                                      int renderbuffertarget,
                                      int renderbuffer);/*
	 // jnigen - native goes here
  	 glFramebufferRenderbufferOES( (GLenum) target,
  	                               (GLenum) attachment,
  	                               (GLenum) renderbuffertarget,
  	                               (GLuint) renderbuffer);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glFramebufferTexture2DOES ( 
  * 		 GLenum   target,
  * 		 GLenum   attachment,
  * 		 GLenum   textarget,
  * 		 GLuint   texture,
  * 		 GLint   level
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glFramebufferTexture2DOES (int target,
                                   int attachment,
                                   int textarget,
                                   int texture,
                                   int level);/*
	 // jnigen - native goes here
  	 glFramebufferTexture2DOES( (GLenum) target,
  	                            (GLenum) attachment,
  	                            (GLenum) textarget,
  	                            (GLuint) texture,
  	                            (GLint) level);
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGetFramebufferAttachmentParameterivOES ( 
  * 		 GLenum   target,
  * 		 GLenum   attachment,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glGetFramebufferAttachmentParameterivOES( int target,
                                                 int attachment,
                                                 int pname,
                                                 int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetFramebufferAttachmentParameterivOES( (GLenum) target,
  	                                           (GLenum) attachment,
  	                                           (GLenum) pname,
  	                                           (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGetFramebufferAttachmentParameterivOES ( 
  * 		 GLenum   target,
  * 		 GLenum   attachment,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
 void glGetFramebufferAttachmentParameterivOES( int target,
                                                int attachment,
                                                int pname,
                                                java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetFramebufferAttachmentParameterivOES( (GLenum) target,
  	                                           (GLenum) attachment,
  	                                           (GLenum) pname,
  	                                           (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_framebuffer_object
  *  
  * C Prototype:
  * void  glGenerateMipmapOES ( 
  * 		 GLenum   target
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_framebuffer_object.txt">GL_OES_framebuffer_object</a> 
  **/ 
 public final native static 
  void glGenerateMipmapOES (int target);/*
	 // jnigen - native goes here
  	 glGenerateMipmapOES( (GLenum) target);
  	   */
    /**
     * Enumeration for extension: GL_OES_mapbuffer
     */
    // enumerations: 
	 public static final int   GL_WRITE_ONLY_OES = 0x88B9;
	 public static final int   GL_BUFFER_ACCESS_OES = 0x88BB;
	 public static final int   GL_BUFFER_MAPPED_OES = 0x88BC;
	 public static final int   GL_BUFFER_MAP_POINTER_OES = 0x88BD;

 
 // Function(s) for extension GL_OES_mapbuffer, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_OES_mapbuffer
  *  
  * C Prototype:
  * void * glMapBufferOES ( 
  * 		 GLenum   target,
  * 		 GLenum   access
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt">GL_OES_mapbuffer</a> 
  **/ 
 public final native static 
  Buffer glMapBufferOES (int target,
                          int access);/*
	 // jnigen - native goes here
  	return (jlong)  glMapBufferOES( (GLenum) target,
  	                                (GLenum) access);
  	   */

 /**<pre>
  *  Extension: GL_OES_mapbuffer
  *  alias of glMapBufferOES
  * C Prototype:
  * void * glMapBuffer ( 
  * 		 GLenum   target,
  * 		 GLenum   access
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt">GL_OES_mapbuffer</a> 
  **/ 
 public final native static 
  Buffer glMapBuffer (int target,
                       int access);/*
	 // jnigen - native goes here
  	return (jlong)  glMapBuffer( (GLenum) target,
  	                             (GLenum) access);
  	   */

 /**<pre>
  *  Extension: GL_OES_mapbuffer
  *  
  * C Prototype:
  *   GLboolean glUnmapBufferOES ( 
  * 		 GLenum   target
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt">GL_OES_mapbuffer</a> 
  **/ 
 public final native static 
  boolean glUnmapBufferOES (int target);/*
	 // jnigen - native goes here
  	   return (jboolean)  glUnmapBufferOES( (GLenum) target);
  	   */

 /**<pre>
  *  Extension: GL_OES_mapbuffer
  *  alias of glUnmapBufferOES
  * C Prototype:
  *   GLboolean glUnmapBuffer ( 
  * 		 GLenum   target
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt">GL_OES_mapbuffer</a> 
  **/ 
 public final native static 
  boolean glUnmapBuffer (int target);/*
	 // jnigen - native goes here
  	   return (jboolean)  glUnmapBuffer( (GLenum) target);
  	   */

 /**<pre>
  *  Extension: GL_OES_mapbuffer
  *  
  * C Prototype:
  * void  glGetBufferPointervOES ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 void ** params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt">GL_OES_mapbuffer</a> 
  **/ 
 public final native static 
 void glGetBufferPointervOES( int target,
                              int pname,
                              java.nio.Buffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetBufferPointervOES( (GLenum) target,
  	                         (GLenum) pname,
  	                         (void **) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_mapbuffer
  *  alias of glGetBufferPointervOES
  * C Prototype:
  * void  glGetBufferPointerv ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 void ** params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt">GL_OES_mapbuffer</a> 
  **/ 
 public final native static 
 void glGetBufferPointerv( int target,
                           int pname,
                           java.nio.Buffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetBufferPointerv( (GLenum) target,
  	                      (GLenum) pname,
  	                      (void **) (params + paramsOffset));
  	   */
    /**
     * Enumeration for extension: GL_OES_matrix_get
     */
    // enumerations: 
	 public static final int   GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D;
	 public static final int   GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E;
	 public static final int   GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F;

 
    /**
     * Enumeration for extension: GL_OES_matrix_palette
     */
    // enumerations: 
	 public static final int   GL_MAX_VERTEX_UNITS_OES = 0x86A4;
	 public static final int   GL_MAX_PALETTE_MATRICES_OES = 0x8842;
	 public static final int   GL_MATRIX_PALETTE_OES = 0x8840;
	 public static final int   GL_MATRIX_INDEX_ARRAY_OES = 0x8844;
	 public static final int   GL_WEIGHT_ARRAY_OES = 0x86AD;
	 public static final int   GL_CURRENT_PALETTE_MATRIX_OES = 0x8843;
	 public static final int   GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846;
	 public static final int   GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847;
	 public static final int   GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848;
	 public static final int   GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849;
	 public static final int   GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E;
	 public static final int   GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB;
	 public static final int   GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9;
	 public static final int   GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA;
	 public static final int   GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC;
	 public static final int   GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E;

 
 // Function(s) for extension GL_OES_matrix_palette, API: gles1   

 /**<pre>
  *  Extension: GL_OES_matrix_palette
  *  
  * C Prototype:
  * void  glCurrentPaletteMatrixOES ( 
  * 		 GLuint   matrixpaletteindex
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_matrix_palette.txt">GL_OES_matrix_palette</a> 
  **/ 
 public final native static 
  void glCurrentPaletteMatrixOES (int matrixpaletteindex);/*
	 // jnigen - native goes here
  	 glCurrentPaletteMatrixOES( (GLuint) matrixpaletteindex);
  	   */

 /**<pre>
  *  Extension: GL_OES_matrix_palette
  *  
  * C Prototype:
  * void  glLoadPaletteFromModelViewMatrixOES ( 
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_matrix_palette.txt">GL_OES_matrix_palette</a> 
  **/ 
 public final native static 
  void glLoadPaletteFromModelViewMatrixOES ();/*
	 // jnigen - native goes here
  	 glLoadPaletteFromModelViewMatrixOES();
  	   */

 /**<pre>
  *  Extension: GL_OES_matrix_palette
  *  
  * C Prototype:
  * void  glMatrixIndexPointerOES ( 
  * 		 GLint   size,
  * 		 GLenum   type,
  * 		 GLsizei   stride,
  * 		 const void * pointer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_matrix_palette.txt">GL_OES_matrix_palette</a> 
  **/ 
 public final native static 
 void glMatrixIndexPointerOES( int size,
                               int type,
                               int stride,
                               java.nio.Buffer pointer, int pointerOffset); /*
	 // jnigen - native goes here
  	 glMatrixIndexPointerOES( (GLint) size,
  	                          (GLenum) type,
  	                          (GLsizei) stride,
  	                          (const void *) (pointer + pointerOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_matrix_palette
  *  
  * C Prototype:
  * void  glWeightPointerOES ( 
  * 		 GLint   size,
  * 		 GLenum   type,
  * 		 GLsizei   stride,
  * 		 const void * pointer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_matrix_palette.txt">GL_OES_matrix_palette</a> 
  **/ 
 public final native static 
 void glWeightPointerOES( int size,
                          int type,
                          int stride,
                          java.nio.Buffer pointer, int pointerOffset); /*
	 // jnigen - native goes here
  	 glWeightPointerOES( (GLint) size,
  	                     (GLenum) type,
  	                     (GLsizei) stride,
  	                     (const void *) (pointer + pointerOffset));
  	   */
    /**
     * Enumeration for extension: GL_OES_packed_depth_stencil
     */
    // enumerations: 
	 public static final int   GL_DEPTH_STENCIL_OES = 0x84F9;
	 public static final int   GL_UNSIGNED_INT_24_8_OES = 0x84FA;
	 public static final int   GL_DEPTH24_STENCIL8_OES = 0x88F0;

 
    /**
     * Enumeration for extension: GL_OES_point_size_array
     */
    // enumerations: 
	 public static final int   GL_POINT_SIZE_ARRAY_OES = 0x8B9C;
	 public static final int   GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A;
	 public static final int   GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B;
	 public static final int   GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C;
	 public static final int   GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F;

 
 // Function(s) for extension GL_OES_point_size_array, API: gles1   

 /**<pre>
  *  Extension: GL_OES_point_size_array
  *  
  * C Prototype:
  * void  glPointSizePointerOES ( 
  * 		 GLenum   type,
  * 		 GLsizei   stride,
  * 		 const void * pointer
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_point_size_array.txt">GL_OES_point_size_array</a> 
  **/ 
 public final native static 
 void glPointSizePointerOES( int type,
                             int stride,
                             java.nio.Buffer pointer, int pointerOffset); /*
	 // jnigen - native goes here
  	 glPointSizePointerOES( (GLenum) type,
  	                        (GLsizei) stride,
  	                        (const void *) (pointer + pointerOffset));
  	   */
    /**
     * Enumeration for extension: GL_OES_point_sprite
     */
    // enumerations: 
	 public static final int   GL_POINT_SPRITE_OES = 0x8861;
	 public static final int   GL_COORD_REPLACE_OES = 0x8862;

 
 // Function(s) for extension GL_OES_query_matrix, API: gl|gles1   

 /**<pre>
  *  Extension: GL_OES_query_matrix
  *  
  * C Prototype:
  *   GLbitfield glQueryMatrixxOES ( 
  * 		 GLfixed  * mantissa,
  * 		 GLint  * exponent
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_query_matrix.txt">GL_OES_query_matrix</a> 
  **/ 
 public final native static 
 int glQueryMatrixxOES( java.nio.IntBuffer mantissa, int mantissaOffset,
                        java.nio.IntBuffer exponent, int exponentOffset); /*
	 // jnigen - native goes here
  	   return (jint)  glQueryMatrixxOES( (GLfixed  *) (mantissa + mantissaOffset),
  	                                     (GLint  *) (exponent + exponentOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_query_matrix
  *  
  * C Prototype:
  *   GLbitfield glQueryMatrixxOES ( 
  * 		 GLfixed  * mantissa,
  * 		 GLint  * exponent
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_query_matrix.txt">GL_OES_query_matrix</a> 
  **/ 
 public final native static 
  int glQueryMatrixxOES( int[] mantissa, int mantissaOffset,
                         int[] exponent, int exponentOffset);/*
	 // jnigen - native goes here
  	   return (jint)  glQueryMatrixxOES( (GLfixed  *) (mantissa + mantissaOffset),
  	                                     (GLint  *) (exponent + exponentOffset));
  	   */
    /**
     * Enumeration for extension: GL_OES_read_format
     */
    // enumerations: 
	 public static final int   GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
	 public static final int   GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;

 
    /**
     * Enumeration for extension: GL_OES_required_internalformat
     */
    // enumerations: 
	 public static final int   GL_ALPHA8_OES = 0x803C;
//	 public static final int   GL_DEPTH_COMPONENT16_OES = 0x81A5;
	 public static final int   GL_DEPTH_COMPONENT24_OES = 0x81A6;
//	 public static final int   GL_DEPTH24_STENCIL8_OES = 0x88F0;
	 public static final int   GL_DEPTH_COMPONENT32_OES = 0x81A7;
	 public static final int   GL_LUMINANCE4_ALPHA4_OES = 0x8043;
	 public static final int   GL_LUMINANCE8_ALPHA8_OES = 0x8045;
	 public static final int   GL_LUMINANCE8_OES = 0x8040;
//	 public static final int   GL_RGBA4_OES = 0x8056;
//	 public static final int   GL_RGB5_A1_OES = 0x8057;
//	 public static final int   GL_RGB565_OES = 0x8D62;
//	 public static final int   GL_RGB8_OES = 0x8051;
//	 public static final int   GL_RGBA8_OES = 0x8058;
	 public static final int   GL_RGB10_EXT = 0x8052;
	 public static final int   GL_RGB10_A2_EXT = 0x8059;

 
    /**
     * Enumeration for extension: GL_OES_rgb8_rgba8
     */
    // enumerations: 
	 public static final int   GL_RGB8_OES = 0x8051;
	 public static final int   GL_RGBA8_OES = 0x8058;

 
 // Function(s) for extension GL_OES_single_precision, API: gl|gles1   

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glClearDepthfOES ( 
  * 		 GLclampf   depth // group=ClampedFloat32  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glClearDepthfOES (float depth	/*   group=ClampedFloat32 */);/*
	 // jnigen - native goes here
  	 glClearDepthfOES( (GLclampf) depth);
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  alias of glClearDepthfOES
  * C Prototype:
  * void  glClearDepthf ( 
  * 		 GLclampf   depth // group=ClampedFloat32  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glClearDepthf (float depth	/*   group=ClampedFloat32 */);/*
	 // jnigen - native goes here
  	 glClearDepthf( (GLclampf) depth);
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glClipPlanefOES ( 
  * 		 GLenum   plane,
  * 		 const  GLfloat  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
 void glClipPlanefOES( int plane,
                       java.nio.FloatBuffer equation, int equationOffset); /*
	 // jnigen - native goes here
  	 glClipPlanefOES( (GLenum) plane,
  	                  (const  GLfloat  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glClipPlanefOES ( 
  * 		 GLenum   plane,
  * 		 const  GLfloat  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glClipPlanefOES( int plane,
                        final float [] equation, int equationOffset);/*
	 // jnigen - native goes here
  	 glClipPlanefOES( (GLenum) plane,
  	                  (const  GLfloat  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glDepthRangefOES ( 
  * 		 GLclampf   n, // group=ClampedFloat32  
  * 		 GLclampf   f // group=ClampedFloat32  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glDepthRangefOES (float n	/*   group=ClampedFloat32 */,
                          float f	/*   group=ClampedFloat32 */);/*
	 // jnigen - native goes here
  	 glDepthRangefOES( (GLclampf) n,
  	                   (GLclampf) f);
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  alias of glDepthRangefOES
  * C Prototype:
  * void  glDepthRangef ( 
  * 		 GLclampf   n, // group=ClampedFloat32  
  * 		 GLclampf   f // group=ClampedFloat32  
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glDepthRangef (float n	/*   group=ClampedFloat32 */,
                       float f	/*   group=ClampedFloat32 */);/*
	 // jnigen - native goes here
  	 glDepthRangef( (GLclampf) n,
  	                (GLclampf) f);
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glFrustumfOES ( 
  * 		 GLfloat   l,
  * 		 GLfloat   r,
  * 		 GLfloat   b,
  * 		 GLfloat   t,
  * 		 GLfloat   n,
  * 		 GLfloat   f
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glFrustumfOES (float l,
                       float r,
                       float b,
                       float t,
                       float n,
                       float f);/*
	 // jnigen - native goes here
  	 glFrustumfOES( (GLfloat) l,
  	                (GLfloat) r,
  	                (GLfloat) b,
  	                (GLfloat) t,
  	                (GLfloat) n,
  	                (GLfloat) f);
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glGetClipPlanefOES ( 
  * 		 GLenum   plane,
  * 		 GLfloat  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glGetClipPlanefOES( int plane,
                           float[] equation, int equationOffset);/*
	 // jnigen - native goes here
  	 glGetClipPlanefOES( (GLenum) plane,
  	                     (GLfloat  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glGetClipPlanefOES ( 
  * 		 GLenum   plane,
  * 		 GLfloat  * equation
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
 void glGetClipPlanefOES( int plane,
                          java.nio.FloatBuffer equation, int equationOffset); /*
	 // jnigen - native goes here
  	 glGetClipPlanefOES( (GLenum) plane,
  	                     (GLfloat  *) (equation + equationOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_single_precision
  *  
  * C Prototype:
  * void  glOrthofOES ( 
  * 		 GLfloat   l,
  * 		 GLfloat   r,
  * 		 GLfloat   b,
  * 		 GLfloat   t,
  * 		 GLfloat   n,
  * 		 GLfloat   f
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_single_precision.txt">GL_OES_single_precision</a> 
  **/ 
 public final native static 
  void glOrthofOES (float l,
                     float r,
                     float b,
                     float t,
                     float n,
                     float f);/*
	 // jnigen - native goes here
  	 glOrthofOES( (GLfloat) l,
  	              (GLfloat) r,
  	              (GLfloat) b,
  	              (GLfloat) t,
  	              (GLfloat) n,
  	              (GLfloat) f);
  	   */
    /**
     * Enumeration for extension: GL_OES_stencil1
     */
    // enumerations: 
	 public static final int   GL_STENCIL_INDEX1_OES = 0x8D46;

 
    /**
     * Enumeration for extension: GL_OES_stencil4
     */
    // enumerations: 
	 public static final int   GL_STENCIL_INDEX4_OES = 0x8D47;

 
    /**
     * Enumeration for extension: GL_OES_stencil8
     */
    // enumerations: 
	 public static final int   GL_STENCIL_INDEX8_OES = 0x8D48;

 
    /**
     * Enumeration for extension: GL_OES_stencil_wrap
     */
    // enumerations: 
	 public static final int   GL_INCR_WRAP_OES = 0x8507;
	 public static final int   GL_DECR_WRAP_OES = 0x8508;

 
    /**
     * Enumeration for extension: GL_OES_texture_cube_map
     */
    // enumerations: 
	 public static final int   GL_NORMAL_MAP_OES = 0x8511;
	 public static final int   GL_REFLECTION_MAP_OES = 0x8512;
	 public static final int   GL_TEXTURE_CUBE_MAP_OES = 0x8513;
	 public static final int   GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514;
	 public static final int   GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515;
	 public static final int   GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516;
	 public static final int   GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517;
	 public static final int   GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518;
	 public static final int   GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519;
	 public static final int   GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A;
	 public static final int   GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C;
	 public static final int   GL_TEXTURE_GEN_MODE_OES = 0x2500;
	 public static final int   GL_TEXTURE_GEN_STR_OES = 0x8D60;

 
 // Function(s) for extension GL_OES_texture_cube_map, API: gles1   

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenfOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLfloat   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glTexGenfOES (int coord,
                      int pname,
                      float param);/*
	 // jnigen - native goes here
  	 glTexGenfOES( (GLenum) coord,
  	               (GLenum) pname,
  	               (GLfloat) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenfvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 const  GLfloat  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glTexGenfvOES( int coord,
                      int pname,
                      final float [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glTexGenfvOES( (GLenum) coord,
  	                (GLenum) pname,
  	                (const  GLfloat  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenfvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 const  GLfloat  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
 void glTexGenfvOES( int coord,
                     int pname,
                     java.nio.FloatBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glTexGenfvOES( (GLenum) coord,
  	                (GLenum) pname,
  	                (const  GLfloat  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGeniOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLint   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glTexGeniOES (int coord,
                      int pname,
                      int param);/*
	 // jnigen - native goes here
  	 glTexGeniOES( (GLenum) coord,
  	               (GLenum) pname,
  	               (GLint) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenivOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 const  GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glTexGenivOES( int coord,
                      int pname,
                      final int [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glTexGenivOES( (GLenum) coord,
  	                (GLenum) pname,
  	                (const  GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenivOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 const  GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
 void glTexGenivOES( int coord,
                     int pname,
                     java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glTexGenivOES( (GLenum) coord,
  	                (GLenum) pname,
  	                (const  GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenxOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLfixed   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glTexGenxOES (int coord,
                      int pname,
                      int param);/*
	 // jnigen - native goes here
  	 glTexGenxOES( (GLenum) coord,
  	               (GLenum) pname,
  	               (GLfixed) param);
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenxvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glTexGenxvOES( int coord,
                      int pname,
                      final int [] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glTexGenxvOES( (GLenum) coord,
  	                (GLenum) pname,
  	                (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glTexGenxvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 const  GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
 void glTexGenxvOES( int coord,
                     int pname,
                     java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glTexGenxvOES( (GLenum) coord,
  	                (GLenum) pname,
  	                (const  GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glGetTexGenfvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLfloat  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glGetTexGenfvOES( int coord,
                         int pname,
                         float[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetTexGenfvOES( (GLenum) coord,
  	                   (GLenum) pname,
  	                   (GLfloat  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glGetTexGenfvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLfloat  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
 void glGetTexGenfvOES( int coord,
                        int pname,
                        java.nio.FloatBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetTexGenfvOES( (GLenum) coord,
  	                   (GLenum) pname,
  	                   (GLfloat  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glGetTexGenivOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glGetTexGenivOES( int coord,
                         int pname,
                         int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetTexGenivOES( (GLenum) coord,
  	                   (GLenum) pname,
  	                   (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glGetTexGenivOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
 void glGetTexGenivOES( int coord,
                        int pname,
                        java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetTexGenivOES( (GLenum) coord,
  	                   (GLenum) pname,
  	                   (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glGetTexGenxvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
 void glGetTexGenxvOES( int coord,
                        int pname,
                        java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glGetTexGenxvOES( (GLenum) coord,
  	                   (GLenum) pname,
  	                   (GLfixed  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_texture_cube_map
  *  
  * C Prototype:
  * void  glGetTexGenxvOES ( 
  * 		 GLenum   coord,
  * 		 GLenum   pname,
  * 		 GLfixed  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_texture_cube_map.txt">GL_OES_texture_cube_map</a> 
  **/ 
 public final native static 
  void glGetTexGenxvOES( int coord,
                         int pname,
                         int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glGetTexGenxvOES( (GLenum) coord,
  	                   (GLenum) pname,
  	                   (GLfixed  *) (params + paramsOffset));
  	   */
    /**
     * Enumeration for extension: GL_OES_texture_mirrored_repeat
     */
    // enumerations: 
	 public static final int   GL_MIRRORED_REPEAT_OES = 0x8370;

 
    /**
     * Enumeration for extension: GL_OES_vertex_array_object
     */
    // enumerations: 
	 public static final int   GL_VERTEX_ARRAY_BINDING_OES = 0x85B5;

 
 // Function(s) for extension GL_OES_vertex_array_object, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  
  * C Prototype:
  * void  glBindVertexArrayOES ( 
  * 		 GLuint   array
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  void glBindVertexArrayOES (int array);/*
	 // jnigen - native goes here
  	 glBindVertexArrayOES( (GLuint) array);
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  alias of glBindVertexArrayOES
  * C Prototype:
  * void  glBindVertexArray ( 
  * 		 GLuint   array
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  void glBindVertexArray (int array);/*
	 // jnigen - native goes here
  	 glBindVertexArray( (GLuint) array);
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  
  * C Prototype:
  * void  glDeleteVertexArraysOES ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
 void glDeleteVertexArraysOES( int n,
                               java.nio.IntBuffer arrays, int arraysOffset); /*
	 // jnigen - native goes here
  	 glDeleteVertexArraysOES( (GLsizei) n,
  	                          (const  GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  
  * C Prototype:
  * void  glDeleteVertexArraysOES ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  void glDeleteVertexArraysOES( int n,
                                final int [] arrays, int arraysOffset);/*
	 // jnigen - native goes here
  	 glDeleteVertexArraysOES( (GLsizei) n,
  	                          (const  GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  alias of glDeleteVertexArraysOES
  * C Prototype:
  * void  glDeleteVertexArrays ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  void glDeleteVertexArrays( int n,
                             final int [] arrays, int arraysOffset);/*
	 // jnigen - native goes here
  	 glDeleteVertexArrays( (GLsizei) n,
  	                       (const  GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  alias of glDeleteVertexArraysOES
  * C Prototype:
  * void  glDeleteVertexArrays ( 
  * 		 GLsizei   n,
  * 		 const  GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
 void glDeleteVertexArrays( int n,
                            java.nio.IntBuffer arrays, int arraysOffset); /*
	 // jnigen - native goes here
  	 glDeleteVertexArrays( (GLsizei) n,
  	                       (const  GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  
  * C Prototype:
  * void  glGenVertexArraysOES ( 
  * 		 GLsizei   n,
  * 		 GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  void glGenVertexArraysOES( int n,
                             int[] arrays, int arraysOffset);/*
	 // jnigen - native goes here
  	 glGenVertexArraysOES( (GLsizei) n,
  	                       (GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  
  * C Prototype:
  * void  glGenVertexArraysOES ( 
  * 		 GLsizei   n,
  * 		 GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
 void glGenVertexArraysOES( int n,
                            java.nio.IntBuffer arrays, int arraysOffset); /*
	 // jnigen - native goes here
  	 glGenVertexArraysOES( (GLsizei) n,
  	                       (GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  alias of glGenVertexArraysOES
  * C Prototype:
  * void  glGenVertexArrays ( 
  * 		 GLsizei   n,
  * 		 GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  void glGenVertexArrays( int n,
                          int[] arrays, int arraysOffset);/*
	 // jnigen - native goes here
  	 glGenVertexArrays( (GLsizei) n,
  	                    (GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  alias of glGenVertexArraysOES
  * C Prototype:
  * void  glGenVertexArrays ( 
  * 		 GLsizei   n,
  * 		 GLuint  * arrays
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
 void glGenVertexArrays( int n,
                         java.nio.IntBuffer arrays, int arraysOffset); /*
	 // jnigen - native goes here
  	 glGenVertexArrays( (GLsizei) n,
  	                    (GLuint  *) (arrays + arraysOffset));
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  
  * C Prototype:
  *   GLboolean glIsVertexArrayOES ( 
  * 		 GLuint   array
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  boolean glIsVertexArrayOES (int array);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsVertexArrayOES( (GLuint) array);
  	   */

 /**<pre>
  *  Extension: GL_OES_vertex_array_object
  *  alias of glIsVertexArrayOES
  * C Prototype:
  *   GLboolean glIsVertexArray ( 
  * 		 GLuint   array
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt">GL_OES_vertex_array_object</a> 
  **/ 
 public final native static 
  boolean glIsVertexArray (int array);/*
	 // jnigen - native goes here
  	   return (jboolean)  glIsVertexArray( (GLuint) array);
  	   */
 // Function(s) for extension GL_QCOM_driver_control, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_QCOM_driver_control
  *  
  * C Prototype:
  * void  glGetDriverControlsQCOM ( 
  * 		 GLint  * num,
  * 		 GLsizei   size,
  * 		 GLuint  * driverControls
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt">GL_QCOM_driver_control</a> 
  **/ 
 public final native static 
 void glGetDriverControlsQCOM( java.nio.IntBuffer num, int numOffset,
                               int size,
                               java.nio.IntBuffer driverControls, int driverControlsOffset); /*
	 // jnigen - native goes here
  	 glGetDriverControlsQCOM( (GLint  *) (num + numOffset),
  	                          (GLsizei) size,
  	                          (GLuint  *) (driverControls + driverControlsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_driver_control
  *  
  * C Prototype:
  * void  glGetDriverControlsQCOM ( 
  * 		 GLint  * num,
  * 		 GLsizei   size,
  * 		 GLuint  * driverControls
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt">GL_QCOM_driver_control</a> 
  **/ 
 public final native static 
  void glGetDriverControlsQCOM( int[] num, int numOffset,
                                int size,
                                int[] driverControls, int driverControlsOffset);/*
	 // jnigen - native goes here
  	 glGetDriverControlsQCOM( (GLint  *) (num + numOffset),
  	                          (GLsizei) size,
  	                          (GLuint  *) (driverControls + driverControlsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_driver_control
  *  
  * C Prototype:
  * void  glGetDriverControlStringQCOM ( 
  * 		 GLuint   driverControl,
  * 		 GLsizei   bufSize,
  * 		 GLsizei  * length,
  * 		 GLchar  * driverControlString
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt">GL_QCOM_driver_control</a> 
  **/ 
 public final native static 
  void glGetDriverControlStringQCOM( int driverControl,
                                     int bufSize,
                                     int[] length, int lengthOffset,
                                     String driverControlString, int driverControlStringOffset);/*
	 // jnigen - native goes here
  	 glGetDriverControlStringQCOM( (GLuint) driverControl,
  	                               (GLsizei) bufSize,
  	                               (GLsizei  *) (length + lengthOffset),
  	                               (GLchar  *) (driverControlString + driverControlStringOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_driver_control
  *  
  * C Prototype:
  * void  glGetDriverControlStringQCOM ( 
  * 		 GLuint   driverControl,
  * 		 GLsizei   bufSize,
  * 		 GLsizei  * length,
  * 		 GLchar  * driverControlString
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt">GL_QCOM_driver_control</a> 
  **/ 
 public final native static 
 void glGetDriverControlStringQCOM( int driverControl,
                                    int bufSize,
                                    java.nio.IntBuffer length, int lengthOffset,
                                    String driverControlString); /*
	 // jnigen - native goes here
  	 glGetDriverControlStringQCOM( (GLuint) driverControl,
  	                               (GLsizei) bufSize,
  	                               (GLsizei  *) (length + lengthOffset),
  	                               (GLchar  *) (driverControlString + driverControlStringOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_driver_control
  *  
  * C Prototype:
  * void  glEnableDriverControlQCOM ( 
  * 		 GLuint   driverControl
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt">GL_QCOM_driver_control</a> 
  **/ 
 public final native static 
  void glEnableDriverControlQCOM (int driverControl);/*
	 // jnigen - native goes here
  	 glEnableDriverControlQCOM( (GLuint) driverControl);
  	   */

 /**<pre>
  *  Extension: GL_QCOM_driver_control
  *  
  * C Prototype:
  * void  glDisableDriverControlQCOM ( 
  * 		 GLuint   driverControl
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt">GL_QCOM_driver_control</a> 
  **/ 
 public final native static 
  void glDisableDriverControlQCOM (int driverControl);/*
	 // jnigen - native goes here
  	 glDisableDriverControlQCOM( (GLuint) driverControl);
  	   */
    /**
     * Enumeration for extension: GL_QCOM_extended_get
     */
    // enumerations: 
	 public static final int   GL_TEXTURE_WIDTH_QCOM = 0x8BD2;
	 public static final int   GL_TEXTURE_HEIGHT_QCOM = 0x8BD3;
	 public static final int   GL_TEXTURE_DEPTH_QCOM = 0x8BD4;
	 public static final int   GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
	 public static final int   GL_TEXTURE_FORMAT_QCOM = 0x8BD6;
	 public static final int   GL_TEXTURE_TYPE_QCOM = 0x8BD7;
	 public static final int   GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
	 public static final int   GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
	 public static final int   GL_TEXTURE_TARGET_QCOM = 0x8BDA;
	 public static final int   GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
	 public static final int   GL_STATE_RESTORE = 0x8BDC;

 
 // Function(s) for extension GL_QCOM_extended_get, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetTexturesQCOM ( 
  * 		 GLuint  * textures,
  * 		 GLint   maxTextures,
  * 		 GLint  * numTextures
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetTexturesQCOM( java.nio.IntBuffer textures, int texturesOffset,
                            int maxTextures,
                            java.nio.IntBuffer numTextures, int numTexturesOffset); /*
	 // jnigen - native goes here
  	 glExtGetTexturesQCOM( (GLuint  *) (textures + texturesOffset),
  	                       (GLint) maxTextures,
  	                       (GLint  *) (numTextures + numTexturesOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetTexturesQCOM ( 
  * 		 GLuint  * textures,
  * 		 GLint   maxTextures,
  * 		 GLint  * numTextures
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
  void glExtGetTexturesQCOM( int[] textures, int texturesOffset,
                             int maxTextures,
                             int[] numTextures, int numTexturesOffset);/*
	 // jnigen - native goes here
  	 glExtGetTexturesQCOM( (GLuint  *) (textures + texturesOffset),
  	                       (GLint) maxTextures,
  	                       (GLint  *) (numTextures + numTexturesOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetBuffersQCOM ( 
  * 		 GLuint  * buffers,
  * 		 GLint   maxBuffers,
  * 		 GLint  * numBuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetBuffersQCOM( java.nio.IntBuffer buffers, int buffersOffset,
                           int maxBuffers,
                           java.nio.IntBuffer numBuffers, int numBuffersOffset); /*
	 // jnigen - native goes here
  	 glExtGetBuffersQCOM( (GLuint  *) (buffers + buffersOffset),
  	                      (GLint) maxBuffers,
  	                      (GLint  *) (numBuffers + numBuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetBuffersQCOM ( 
  * 		 GLuint  * buffers,
  * 		 GLint   maxBuffers,
  * 		 GLint  * numBuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
  void glExtGetBuffersQCOM( int[] buffers, int buffersOffset,
                            int maxBuffers,
                            int[] numBuffers, int numBuffersOffset);/*
	 // jnigen - native goes here
  	 glExtGetBuffersQCOM( (GLuint  *) (buffers + buffersOffset),
  	                      (GLint) maxBuffers,
  	                      (GLint  *) (numBuffers + numBuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetRenderbuffersQCOM ( 
  * 		 GLuint  * renderbuffers,
  * 		 GLint   maxRenderbuffers,
  * 		 GLint  * numRenderbuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
  void glExtGetRenderbuffersQCOM( int[] renderbuffers, int renderbuffersOffset,
                                  int maxRenderbuffers,
                                  int[] numRenderbuffers, int numRenderbuffersOffset);/*
	 // jnigen - native goes here
  	 glExtGetRenderbuffersQCOM( (GLuint  *) (renderbuffers + renderbuffersOffset),
  	                            (GLint) maxRenderbuffers,
  	                            (GLint  *) (numRenderbuffers + numRenderbuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetRenderbuffersQCOM ( 
  * 		 GLuint  * renderbuffers,
  * 		 GLint   maxRenderbuffers,
  * 		 GLint  * numRenderbuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetRenderbuffersQCOM( java.nio.IntBuffer renderbuffers, int renderbuffersOffset,
                                 int maxRenderbuffers,
                                 java.nio.IntBuffer numRenderbuffers, int numRenderbuffersOffset); /*
	 // jnigen - native goes here
  	 glExtGetRenderbuffersQCOM( (GLuint  *) (renderbuffers + renderbuffersOffset),
  	                            (GLint) maxRenderbuffers,
  	                            (GLint  *) (numRenderbuffers + numRenderbuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetFramebuffersQCOM ( 
  * 		 GLuint  * framebuffers,
  * 		 GLint   maxFramebuffers,
  * 		 GLint  * numFramebuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetFramebuffersQCOM( java.nio.IntBuffer framebuffers, int framebuffersOffset,
                                int maxFramebuffers,
                                java.nio.IntBuffer numFramebuffers, int numFramebuffersOffset); /*
	 // jnigen - native goes here
  	 glExtGetFramebuffersQCOM( (GLuint  *) (framebuffers + framebuffersOffset),
  	                           (GLint) maxFramebuffers,
  	                           (GLint  *) (numFramebuffers + numFramebuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetFramebuffersQCOM ( 
  * 		 GLuint  * framebuffers,
  * 		 GLint   maxFramebuffers,
  * 		 GLint  * numFramebuffers
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
  void glExtGetFramebuffersQCOM( int[] framebuffers, int framebuffersOffset,
                                 int maxFramebuffers,
                                 int[] numFramebuffers, int numFramebuffersOffset);/*
	 // jnigen - native goes here
  	 glExtGetFramebuffersQCOM( (GLuint  *) (framebuffers + framebuffersOffset),
  	                           (GLint) maxFramebuffers,
  	                           (GLint  *) (numFramebuffers + numFramebuffersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetTexLevelParameterivQCOM ( 
  * 		 GLuint   texture,
  * 		 GLenum   face,
  * 		 GLint   level,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
  void glExtGetTexLevelParameterivQCOM( int texture,
                                        int face,
                                        int level,
                                        int pname,
                                        int[] params, int paramsOffset);/*
	 // jnigen - native goes here
  	 glExtGetTexLevelParameterivQCOM( (GLuint) texture,
  	                                  (GLenum) face,
  	                                  (GLint) level,
  	                                  (GLenum) pname,
  	                                  (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetTexLevelParameterivQCOM ( 
  * 		 GLuint   texture,
  * 		 GLenum   face,
  * 		 GLint   level,
  * 		 GLenum   pname,
  * 		 GLint  * params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetTexLevelParameterivQCOM( int texture,
                                       int face,
                                       int level,
                                       int pname,
                                       java.nio.IntBuffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glExtGetTexLevelParameterivQCOM( (GLuint) texture,
  	                                  (GLenum) face,
  	                                  (GLint) level,
  	                                  (GLenum) pname,
  	                                  (GLint  *) (params + paramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtTexObjectStateOverrideiQCOM ( 
  * 		 GLenum   target,
  * 		 GLenum   pname,
  * 		 GLint   param
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
  void glExtTexObjectStateOverrideiQCOM (int target,
                                          int pname,
                                          int param);/*
	 // jnigen - native goes here
  	 glExtTexObjectStateOverrideiQCOM( (GLenum) target,
  	                                   (GLenum) pname,
  	                                   (GLint) param);
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetTexSubImageQCOM ( 
  * 		 GLenum   target,
  * 		 GLint   level,
  * 		 GLint   xoffset,
  * 		 GLint   yoffset,
  * 		 GLint   zoffset,
  * 		 GLsizei   width,
  * 		 GLsizei   height,
  * 		 GLsizei   depth,
  * 		 GLenum   format,
  * 		 GLenum   type,
  * 		 void * texels
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetTexSubImageQCOM( int target,
                               int level,
                               int xoffset,
                               int yoffset,
                               int zoffset,
                               int width,
                               int height,
                               int depth,
                               int format,
                               int type,
                               java.nio.Buffer texels, int texelsOffset); /*
	 // jnigen - native goes here
  	 glExtGetTexSubImageQCOM( (GLenum) target,
  	                          (GLint) level,
  	                          (GLint) xoffset,
  	                          (GLint) yoffset,
  	                          (GLint) zoffset,
  	                          (GLsizei) width,
  	                          (GLsizei) height,
  	                          (GLsizei) depth,
  	                          (GLenum) format,
  	                          (GLenum) type,
  	                          (void *) (texels + texelsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get
  *  
  * C Prototype:
  * void  glExtGetBufferPointervQCOM ( 
  * 		 GLenum   target,
  * 		 void ** params
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt">GL_QCOM_extended_get</a> 
  **/ 
 public final native static 
 void glExtGetBufferPointervQCOM( int target,
                                  java.nio.Buffer params, int paramsOffset); /*
	 // jnigen - native goes here
  	 glExtGetBufferPointervQCOM( (GLenum) target,
  	                             (void **) (params + paramsOffset));
  	   */
 // Function(s) for extension GL_QCOM_extended_get2, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  * void  glExtGetShadersQCOM ( 
  * 		 GLuint  * shaders,
  * 		 GLint   maxShaders,
  * 		 GLint  * numShaders
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
 void glExtGetShadersQCOM( java.nio.IntBuffer shaders, int shadersOffset,
                           int maxShaders,
                           java.nio.IntBuffer numShaders, int numShadersOffset); /*
	 // jnigen - native goes here
  	 glExtGetShadersQCOM( (GLuint  *) (shaders + shadersOffset),
  	                      (GLint) maxShaders,
  	                      (GLint  *) (numShaders + numShadersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  * void  glExtGetShadersQCOM ( 
  * 		 GLuint  * shaders,
  * 		 GLint   maxShaders,
  * 		 GLint  * numShaders
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
  void glExtGetShadersQCOM( int[] shaders, int shadersOffset,
                            int maxShaders,
                            int[] numShaders, int numShadersOffset);/*
	 // jnigen - native goes here
  	 glExtGetShadersQCOM( (GLuint  *) (shaders + shadersOffset),
  	                      (GLint) maxShaders,
  	                      (GLint  *) (numShaders + numShadersOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  * void  glExtGetProgramsQCOM ( 
  * 		 GLuint  * programs,
  * 		 GLint   maxPrograms,
  * 		 GLint  * numPrograms
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
 void glExtGetProgramsQCOM( java.nio.IntBuffer programs, int programsOffset,
                            int maxPrograms,
                            java.nio.IntBuffer numPrograms, int numProgramsOffset); /*
	 // jnigen - native goes here
  	 glExtGetProgramsQCOM( (GLuint  *) (programs + programsOffset),
  	                       (GLint) maxPrograms,
  	                       (GLint  *) (numPrograms + numProgramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  * void  glExtGetProgramsQCOM ( 
  * 		 GLuint  * programs,
  * 		 GLint   maxPrograms,
  * 		 GLint  * numPrograms
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
  void glExtGetProgramsQCOM( int[] programs, int programsOffset,
                             int maxPrograms,
                             int[] numPrograms, int numProgramsOffset);/*
	 // jnigen - native goes here
  	 glExtGetProgramsQCOM( (GLuint  *) (programs + programsOffset),
  	                       (GLint) maxPrograms,
  	                       (GLint  *) (numPrograms + numProgramsOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  *   GLboolean glExtIsProgramBinaryQCOM ( 
  * 		 GLuint   program
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
  boolean glExtIsProgramBinaryQCOM (int program);/*
	 // jnigen - native goes here
  	   return (jboolean)  glExtIsProgramBinaryQCOM( (GLuint) program);
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  * void  glExtGetProgramBinarySourceQCOM ( 
  * 		 GLuint   program,
  * 		 GLenum   shadertype,
  * 		 GLchar  * source,
  * 		 GLint  * length
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
  void glExtGetProgramBinarySourceQCOM( int program,
                                        int shadertype,
                                        String source, int sourceOffset,
                                        int[] length, int lengthOffset);/*
	 // jnigen - native goes here
  	 glExtGetProgramBinarySourceQCOM( (GLuint) program,
  	                                  (GLenum) shadertype,
  	                                  (GLchar  *) (source + sourceOffset),
  	                                  (GLint  *) (length + lengthOffset));
  	   */

 /**<pre>
  *  Extension: GL_QCOM_extended_get2
  *  
  * C Prototype:
  * void  glExtGetProgramBinarySourceQCOM ( 
  * 		 GLuint   program,
  * 		 GLenum   shadertype,
  * 		 GLchar  * source,
  * 		 GLint  * length
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt">GL_QCOM_extended_get2</a> 
  **/ 
 public final native static 
 void glExtGetProgramBinarySourceQCOM( int program,
                                       int shadertype,
                                       String source,
                                       java.nio.IntBuffer length, int lengthOffset); /*
	 // jnigen - native goes here
  	 glExtGetProgramBinarySourceQCOM( (GLuint) program,
  	                                  (GLenum) shadertype,
  	                                  (GLchar  *) (source + sourceOffset),
  	                                  (GLint  *) (length + lengthOffset));
  	   */
    /**
     * Enumeration for extension: GL_QCOM_perfmon_global_mode
     */
    // enumerations: 
	 public static final int   GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;

 
    /**
     * Enumeration for extension: GL_QCOM_tiled_rendering
     */
    // enumerations: 
	 public static final int   GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001;
	 public static final int   GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002;
	 public static final int   GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004;
	 public static final int   GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008;
	 public static final int   GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010;
	 public static final int   GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020;
	 public static final int   GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040;
	 public static final int   GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080;
	 public static final int   GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
	 public static final int   GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
	 public static final int   GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
	 public static final int   GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
	 public static final int   GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
	 public static final int   GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
	 public static final int   GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
	 public static final int   GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
	 public static final int   GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
	 public static final int   GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
	 public static final int   GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
	 public static final int   GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
	 public static final int   GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
	 public static final int   GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
	 public static final int   GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
	 public static final int   GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
	 public static final int   GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
	 public static final long  GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 2147483648L;

 
 // Function(s) for extension GL_QCOM_tiled_rendering, API: gles1|gles2   

 /**<pre>
  *  Extension: GL_QCOM_tiled_rendering
  *  
  * C Prototype:
  * void  glStartTilingQCOM ( 
  * 		 GLuint   x,
  * 		 GLuint   y,
  * 		 GLuint   width,
  * 		 GLuint   height,
  * 		 GLbitfield   preserveMask
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_tiled_rendering.txt">GL_QCOM_tiled_rendering</a> 
  **/ 
 public final native static 
  void glStartTilingQCOM (int x,
                           int y,
                           int width,
                           int height,
                           int preserveMask);/*
	 // jnigen - native goes here
  	 glStartTilingQCOM( (GLuint) x,
  	                    (GLuint) y,
  	                    (GLuint) width,
  	                    (GLuint) height,
  	                    (GLbitfield) preserveMask);
  	   */

 /**<pre>
  *  Extension: GL_QCOM_tiled_rendering
  *  
  * C Prototype:
  * void  glEndTilingQCOM ( 
  * 		 GLbitfield   preserveMask
  * 		 );
  * 
  *</pre>
  * See also <a href="https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_tiled_rendering.txt">GL_QCOM_tiled_rendering</a> 
  **/ 
 public final native static 
  void glEndTilingQCOM (int preserveMask);/*
	 // jnigen - native goes here
  	 glEndTilingQCOM( (GLbitfield) preserveMask);
  	   */
    /**
     * Enumeration for extension: GL_QCOM_writeonly_rendering
     */
    // enumerations: 
	 public static final int   GL_WRITEONLY_RENDERING_QCOM = 0x8823;

 

   }// end of class GLES1Ext
